(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[646],{25687:function(e,n,t){"use strict";t.d(n,{pY:function(){return l},AG:function(){return u},zb:function(){return p}});var o=t(9008),s=t(41664),a=t(11163),i=t(85529),r=t(52638),c=t(97527),d=t(85893);function l(){var e=(0,r.a)().isEnterprise;return(0,d.jsxs)("div",{className:"min-h-screen d-flex flex-column",children:[(0,d.jsxs)(o.default,{children:[(0,d.jsx)("title",{children:"GitHub Documentation"}),(0,d.jsx)("meta",{name:"status",content:"500"})]}),(0,d.jsx)(u,{}),(0,d.jsx)("div",{className:"container-xl p-responsive py-9 width-full flex-1",children:(0,d.jsxs)("article",{className:"col-md-10 col-lg-7 mx-auto",children:[(0,d.jsx)("h1",{children:"Ooops!"}),(0,d.jsx)(c.r,{children:"It looks like something went wrong."}),(0,d.jsx)("p",{className:"f3",children:"We track these errors automatically, but if the problem persists please feel free to contact us."}),(0,d.jsxs)("a",{id:"contact-us",href:e?"https://enterprise.github.com/support":"https://support.github.com/contact",className:"btn btn-outline mt-2",children:[(0,d.jsx)(i.CommentDiscussionIcon,{size:"small",className:"octicon mr-1"}),"Contact support"]})]})}),(0,d.jsx)(p,{})]})}var u=function(){var e=(0,a.useRouter)();return(0,d.jsx)("div",{className:"border-bottom color-border-muted no-print",children:(0,d.jsx)("header",{className:"container-xl p-responsive py-3 position-relative d-flex width-full",children:(0,d.jsxs)("div",{className:"d-flex flex-items-center",style:{zIndex:3},id:"github-logo-mobile",children:[(0,d.jsx)(s.default,{href:"/".concat(e.locale),children:(0,d.jsx)("a",{"aria-hidden":"true",tabIndex:-1,children:(0,d.jsx)(i.MarkGithubIcon,{size:32,className:"color-fg-default"})})}),(0,d.jsx)(s.default,{href:"/".concat(e.locale),children:(0,d.jsx)("a",{className:"h4 color-fg-default no-underline no-wrap pl-2",children:"GitHub Docs"})})]})})})},p=function(){return(0,d.jsx)("footer",{className:"py-6 text-small",children:(0,d.jsx)("div",{className:"container-xl d-flex px-3 px-md-6 flex-justify-center",children:(0,d.jsxs)("ul",{className:"d-flex list-style-none flex-wrap flex-justify-center",children:[(0,d.jsxs)("li",{className:"d-flex mr-xl-3 color-fg-muted",children:[(0,d.jsx)(i.MarkGithubIcon,{className:"mr-2 mr-xl-3",size:20}),(0,d.jsxs)("span",{children:["\xa9 ",(new Date).getFullYear()," GitHub, Inc."]})]}),(0,d.jsx)("li",{className:"ml-3",children:(0,d.jsx)("a",{href:"/github/site-policy/github-terms-of-service",children:"Terms"})}),(0,d.jsx)("li",{className:"ml-3",children:(0,d.jsx)("a",{href:"/github/site-policy/github-privacy-statement",children:"Privacy "})}),(0,d.jsx)("li",{className:"ml-3",children:(0,d.jsx)("a",{href:"https://github.com/security",children:"Security"})}),(0,d.jsx)("li",{className:"ml-3",children:(0,d.jsx)("a",{href:"https://www.githubstatus.com/",children:"Status"})}),(0,d.jsx)("li",{className:"ml-3",children:(0,d.jsx)("a",{href:"/",children:"Help"})}),(0,d.jsx)("li",{className:"ml-3",children:(0,d.jsx)("a",{href:"https://support.github.com",children:"Contact GitHub"})}),(0,d.jsx)("li",{className:"ml-3",children:(0,d.jsx)("a",{href:"https://github.com/pricing",children:"Pricing"})}),(0,d.jsx)("li",{className:"ml-3",children:(0,d.jsx)("a",{href:"/developers",children:"Developer API"})}),(0,d.jsx)("li",{className:"ml-3",children:(0,d.jsx)("a",{href:"https://services.github.com/",children:"Training"})}),(0,d.jsx)("li",{className:"ml-3",children:(0,d.jsx)("a",{href:"https://github.com/about",children:"About"})})]})})})}},1252:function(e,n,t){"use strict";t.d(n,{R:function(){return a}});var o=t(66311),s=t(67294);function a(e,n){var t=(0,s.useState)(!1),a=t[0],i=t[1];return(0,s.useEffect)((function(){var t=!0,s=new IntersectionObserver((function(e){var n=(0,o.Z)(e,1)[0];t&&i(n.isIntersecting)}),n);return e.current&&s.observe(e.current),function(){t=!1,e.current&&s.unobserve(e.current)}}),[Object.values(n||{}).join(",")]),a}},64646:function(e,n,t){"use strict";t.d(n,{Z:function(){return St}});var o,s,a,i,r,c,d,l,u,p,h,m,y,f,g,b,v,w,k,j,x,C,N,P,T,I,A,S,O,R,E,D,U,F,_,Z,B,G,H,L,V,M,Y,z,W,$,q,J,K,X,Q,ee,ne,te,oe,se,ae,ie,re,ce,de,le,ue,pe,he,me,ye,fe,ge,be,ve,we,ke,je,xe,Ce,Ne,Pe,Te,Ie,Ae,Se,Oe,Re,Ee,De,Ue,Fe,_e,Ze,Be,Ge,He,Le,Ve,Me,Ye,ze,We,$e,qe,Je,Ke,Xe,Qe,en,nn,tn,on,sn,an,rn,cn,dn,ln,un,pn,hn,mn,yn,fn,gn,bn,vn,wn,kn,jn,xn,Cn,Nn=t(809),Pn=t.n(Nn),Tn=t(85529),In=t(91013),An=t(67294),Sn=t(11163),On=t(52209),Rn=t(18464),En={title:"Building and testing Node.js",shortTitle:"Build & test Node.js",topics:["CI","Node","JavaScript"],type:"tutorial",slug:"/actions/automating-builds-and-tests/building-and-testing-nodejs-or-python",originalArticle:"/actions/automating-builds-and-tests/building-and-testing-nodejs",codeLanguageId:"nodejs",intro:(0,Rn.C)(o||(o=(0,On.Z)(["\n    This guide shows you how to create a continuous integration (CI) workflow that builds and tests Node.js code. If your CI tests pass, you may want to deploy your code or publish a package.\n  "]))),prerequisites:(0,Rn.C)(s||(s=(0,On.Z)(["\n    We recommend that you have a basic understanding of Node.js, YAML, workflow configuration options, and how to create a workflow file. For more information, see:\n\n    - [Learn GitHub Actions](/actions/learn-github-actions)\n    - [Getting started with Node.js](https://nodejs.org/en/docs/guides/getting-started-guide/)\n  "]))),contentBlocks:[{codeBlock:{id:"0"},type:"default",title:"Using the Node.js starter workflow",content:(0,Rn.C)(a||(a=(0,On.Z)(["\n        GitHub provides a Node.js starter workflow that will work for most Node.js projects. This guide includes npm and Yarn examples that you can use to customize the starter workflow. For more information, see the [Node.js starter workflow](https://github.com/actions/starter-workflows/blob/main/ci/node.js.yml).\n\n        To get started quickly, add the starter workflow to the `.github/workflows` directory of your repository. The example workflow assumes that the default branch for your repository is `main`.\n      "],["\n        GitHub provides a Node.js starter workflow that will work for most Node.js projects. This guide includes npm and Yarn examples that you can use to customize the starter workflow. For more information, see the [Node.js starter workflow](https://github.com/actions/starter-workflows/blob/main/ci/node.js.yml).\n\n        To get started quickly, add the starter workflow to the \\`.github/workflows\\` directory of your repository. The example workflow assumes that the default branch for your repository is \\`main\\`.\n      "])))},{codeBlock:{id:"0",highlight:12},type:"default",title:"Running on a different operating system",content:(0,Rn.C)(i||(i=(0,On.Z)(['\n        The starter workflow configures jobs to run on Linux, using the GitHub-hosted `ubuntu-latest` runners. You can change the `runs-on` key to run your jobs on a different operating system. For example, you can use the GitHub-hosted Windows runners.\n\n        ```yaml\n        runs-on: windows-latest\n        ```\n\n        Or, you can run on the GitHub-hosted macOS runners.\n\n        ```yaml\n        runs-on: macos-latest\n        ```\n\n        You can also run jobs in Docker containers, or you can provide a self-hosted runner that runs on your own infrastructure. For more information, see "[Workflow syntax for GitHub Actions](/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idruns-on)."\n      '],['\n        The starter workflow configures jobs to run on Linux, using the GitHub-hosted \\`ubuntu-latest\\` runners. You can change the \\`runs-on\\` key to run your jobs on a different operating system. For example, you can use the GitHub-hosted Windows runners.\n\n        \\`\\`\\`yaml\n        runs-on: windows-latest\n        \\`\\`\\`\n\n        Or, you can run on the GitHub-hosted macOS runners.\n\n        \\`\\`\\`yaml\n        runs-on: macos-latest\n        \\`\\`\\`\n\n        You can also run jobs in Docker containers, or you can provide a self-hosted runner that runs on your own infrastructure. For more information, see "[Workflow syntax for GitHub Actions](/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idruns-on)."\n      '])))},{codeBlock:{id:"0",highlight:[14,23]},type:"default",title:"Specifying the Node.js version",content:(0,Rn.C)(r||(r=(0,On.Z)(['\n        The easiest way to specify a Node.js version is by using the `setup-node` action provided by GitHub. For more information see, [`setup-node`](https://github.com/actions/setup-node/).\n\n        The `setup-node` action takes a Node.js version as an input and configures that version on the runner. The `setup-node` action finds a specific version of Node.js from the tools cache on each runner and adds the necessary binaries to `PATH`, which persists for the rest of the job. Using the `setup-node` action is the recommended way of using Node.js with GitHub Actions because it ensures consistent behavior across different runners and different versions of Node.js. If you are using a self-hosted runner, you must install Node.js and add it to `PATH`.\n\n        The starter workflow includes a matrix strategy that builds and tests your code with four Node.js versions: 10.x, 12.x, 14.x, and 15.x. The \'x\' is a wildcard character that matches the latest minor and patch release available for a version. Each version of Node.js specified in the `node-version` array creates a job that runs the same steps.\n\n        Each job can access the value defined in the matrix `node-version` array using the `matrix` context. The `setup-node` action uses the context as the `node-version` input. The `setup-node` action configures each job with a different Node.js version before building and testing code. For more information about matrix strategies and contexts, see "[Workflow syntax for GitHub Actions](/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix)" and "[Context and expression syntax for GitHub Actions](/actions/reference/context-and-expression-syntax-for-github-actions)."\n      '],['\n        The easiest way to specify a Node.js version is by using the \\`setup-node\\` action provided by GitHub. For more information see, [\\`setup-node\\`](https://github.com/actions/setup-node/).\n\n        The \\`setup-node\\` action takes a Node.js version as an input and configures that version on the runner. The \\`setup-node\\` action finds a specific version of Node.js from the tools cache on each runner and adds the necessary binaries to \\`PATH\\`, which persists for the rest of the job. Using the \\`setup-node\\` action is the recommended way of using Node.js with GitHub Actions because it ensures consistent behavior across different runners and different versions of Node.js. If you are using a self-hosted runner, you must install Node.js and add it to \\`PATH\\`.\n\n        The starter workflow includes a matrix strategy that builds and tests your code with four Node.js versions: 10.x, 12.x, 14.x, and 15.x. The \'x\' is a wildcard character that matches the latest minor and patch release available for a version. Each version of Node.js specified in the \\`node-version\\` array creates a job that runs the same steps.\n\n        Each job can access the value defined in the matrix \\`node-version\\` array using the \\`matrix\\` context. The \\`setup-node\\` action uses the context as the \\`node-version\\` input. The \\`setup-node\\` action configures each job with a different Node.js version before building and testing code. For more information about matrix strategies and contexts, see "[Workflow syntax for GitHub Actions](/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix)" and "[Context and expression syntax for GitHub Actions](/actions/reference/context-and-expression-syntax-for-github-actions)."\n      '])))},{codeBlock:{id:"1",highlight:16},type:"sub-section",content:(0,Rn.C)(c||(c=(0,On.Z)(["\n        Alternatively, you can build and test with exact Node.js versions.\n      "])))},{codeBlock:{id:"2",highlight:19},type:"sub-section",content:(0,Rn.C)(d||(d=(0,On.Z)(["\n        Or, you can build and test using a single version of Node.js too.\n\n        If you don't specify a Node.js version, GitHub uses the environment's default Node.js version.\n        For more information, see \"[Specifications for GitHub-hosted runners](/actions/reference/specifications-for-github-hosted-runners/#supported-software)\".\n      "])))},{codeBlock:{id:"3",highlight:21},type:"default",title:"Installing dependencies",content:(0,Rn.C)(l||(l=(0,On.Z)(['\n        GitHub-hosted runners have npm and Yarn dependency managers installed. You can use npm and Yarn to install dependencies in your workflow before building and testing your code. The Windows and Linux GitHub-hosted runners also have Grunt, Gulp, and Bower installed.\n\n        When using GitHub-hosted runners, you can also cache dependencies to speed up your workflow. For more information, see "[Caching dependencies to speed up workflows](/actions/guides/caching-dependencies-to-speed-up-workflows)."\n      '])))},{codeBlock:{id:"4",highlight:21},type:"sub-section",title:"Example using npm",content:(0,Rn.C)(u||(u=(0,On.Z)(["\n        This example installs the dependencies defined in the *package.json* file. For more information, see [`npm install`](https://docs.npmjs.com/cli/install).\n      "],["\n        This example installs the dependencies defined in the *package.json* file. For more information, see [\\`npm install\\`](https://docs.npmjs.com/cli/install).\n      "])))},{codeBlock:{id:"2",highlight:21},type:"sub-section-2",content:(0,Rn.C)(p||(p=(0,On.Z)(['\n        Using `npm ci` installs the versions in the *package-lock.json* or *npm-shrinkwrap.json* file and prevents updates to the lock file. Using `npm ci` is generally faster than running `npm install`. For more information, see [`npm ci`](https://docs.npmjs.com/cli/ci.html) and "[Introducing `npm ci` for faster, more reliable builds](https://blog.npmjs.org/post/171556855892/introducing-npm-ci-for-faster-more-reliable)."\n      '],['\n        Using \\`npm ci\\` installs the versions in the *package-lock.json* or *npm-shrinkwrap.json* file and prevents updates to the lock file. Using \\`npm ci\\` is generally faster than running \\`npm install\\`. For more information, see [\\`npm ci\\`](https://docs.npmjs.com/cli/ci.html) and "[Introducing \\`npm ci\\` for faster, more reliable builds](https://blog.npmjs.org/post/171556855892/introducing-npm-ci-for-faster-more-reliable)."\n      '])))},{codeBlock:{id:"5",highlight:[21,23]},type:"sub-section",title:"Example using Yarn",content:(0,Rn.C)(h||(h=(0,On.Z)(["\n        This example installs the dependencies defined in the *package.json* file. For more information, see [`yarn install`](https://yarnpkg.com/en/docs/cli/install).\n      "],["\n        This example installs the dependencies defined in the *package.json* file. For more information, see [\\`yarn install\\`](https://yarnpkg.com/en/docs/cli/install).\n      "])))},{codeBlock:{id:"6",highlight:21},type:"sub-section-2",content:(0,Rn.C)(m||(m=(0,On.Z)(["\n        Alternatively, you can pass `--frozen-lockfile` to install the versions in the *yarn.lock* file and prevent updates to the *yarn.lock* file.\n      "],["\n        Alternatively, you can pass \\`--frozen-lockfile\\` to install the versions in the *yarn.lock* file and prevent updates to the *yarn.lock* file.\n      "])))},{codeBlock:{id:"7"},type:"sub-section",title:"Example using a private registry and creating the .npmrc file",content:(0,Rn.C)(y||(y=(0,On.Z)(['\n        You can use the `setup-node` action to create a local *.npmrc* file on the runner that configures the default registry and scope. The `setup-node` action also accepts an authentication token as input, used to access private registries or publish node packages. For more information, see [`setup-node`](https://github.com/actions/setup-node/).\n\n        To authenticate to your private registry, you\'ll need to store your npm authentication token as a secret. For example, create a repository secret called `NPM_TOKEN`. For more information, see "[Creating and using encrypted secrets](/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)."\n\n        In this example, the secret `NPM_TOKEN` stores the npm authentication token. The `setup-node` action configures the *.npmrc* file to read the npm authentication token from the `NODE_AUTH_TOKEN` environment variable. When using the `setup-node` action to create an *.npmrc* file, you must set the `NODE_AUTH_TOKEN` environment variable with the secret that contains your npm authentication token.\n\n        Before installing dependencies, use the `setup-node` action to create the *.npmrc* file. The action has two input parameters. The `node-version` parameter sets the Node.js version, and the `registry-url` parameter sets the default registry. If your package registry uses scopes, you must use the `scope` parameter. For more information, see [`npm-scope`](https://docs.npmjs.com/misc/scope).\n\n        This example creates an *.npmrc* file with the following contents:\n\n        ```ini\n        //registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}\n        @octocat:registry=https://registry.npmjs.org/\n        always-auth=true\n        ```\n      '],['\n        You can use the \\`setup-node\\` action to create a local *.npmrc* file on the runner that configures the default registry and scope. The \\`setup-node\\` action also accepts an authentication token as input, used to access private registries or publish node packages. For more information, see [\\`setup-node\\`](https://github.com/actions/setup-node/).\n\n        To authenticate to your private registry, you\'ll need to store your npm authentication token as a secret. For example, create a repository secret called \\`NPM_TOKEN\\`. For more information, see "[Creating and using encrypted secrets](/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)."\n\n        In this example, the secret \\`NPM_TOKEN\\` stores the npm authentication token. The \\`setup-node\\` action configures the *.npmrc* file to read the npm authentication token from the \\`NODE_AUTH_TOKEN\\` environment variable. When using the \\`setup-node\\` action to create an *.npmrc* file, you must set the \\`NODE_AUTH_TOKEN\\` environment variable with the secret that contains your npm authentication token.\n\n        Before installing dependencies, use the \\`setup-node\\` action to create the *.npmrc* file. The action has two input parameters. The \\`node-version\\` parameter sets the Node.js version, and the \\`registry-url\\` parameter sets the default registry. If your package registry uses scopes, you must use the \\`scope\\` parameter. For more information, see [\\`npm-scope\\`](https://docs.npmjs.com/misc/scope).\n\n        This example creates an *.npmrc* file with the following contents:\n\n        \\`\\`\\`ini\n        //registry.npmjs.org/:_authToken=\\${NODE_AUTH_TOKEN}\n        @octocat:registry=https://registry.npmjs.org/\n        always-auth=true\n        \\`\\`\\`\n      '])))},{codeBlock:{id:"8"},type:"sub-section",title:"Example caching dependencies",content:(0,Rn.C)(f||(f=(0,On.Z)(["\n\n        When using GitHub-hosted runners, you can cache and restore the dependencies using the [`setup-node` action](https://github.com/actions/setup-node). To cache dependencies with the `setup-node` action, you must have a `package-lock.json`, `yarn.lock`, or `pnpm-lock.yaml` file in the root of the repository.\n          \n        If you have a custom requirement or need finer controls for caching, you can use the [`cache` action](https://github.com/marketplace/actions/cache). For more information, see [Caching dependencies to speed up workflows](/actions/guides/caching-dependencies-to-speed-up-workflows) and the [`cache` action](https://github.com/marketplace/actions/cache).\n        \n        "],["\n\n        When using GitHub-hosted runners, you can cache and restore the dependencies using the [\\`setup-node\\` action](https://github.com/actions/setup-node). To cache dependencies with the \\`setup-node\\` action, you must have a \\`package-lock.json\\`, \\`yarn.lock\\`, or \\`pnpm-lock.yaml\\` file in the root of the repository.\n          \n        If you have a custom requirement or need finer controls for caching, you can use the [\\`cache\\` action](https://github.com/marketplace/actions/cache). For more information, see [Caching dependencies to speed up workflows](/actions/guides/caching-dependencies-to-speed-up-workflows) and the [\\`cache\\` action](https://github.com/marketplace/actions/cache).\n        \n        "])))},{codeBlock:{id:"9",highlight:[21,22]},type:"default",title:"Building and testing your code",content:(0,Rn.C)(g||(g=(0,On.Z)(["\n        You can use the same commands that you use locally to build and test your code. For example, if you run `npm run build` to run build steps defined in your *package.json* file and `npm test` to run your test suite, you would add those commands in your workflow file.\n      "],["\n        You can use the same commands that you use locally to build and test your code. For example, if you run \\`npm run build\\` to run build steps defined in your *package.json* file and \\`npm test\\` to run your test suite, you would add those commands in your workflow file.\n      "])))},{codeBlock:{id:"9"},type:"default",title:"Packaging workflow data as artifacts",content:(0,Rn.C)(b||(b=(0,On.Z)(['\n        You can save artifacts from your build and test steps to view after a job completes. For example, you may need to save log files, core dumps, test results, or screenshots. For more information, see "[Persisting workflow data using artifacts](/actions/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts)."\n      '])))},{codeBlock:{id:"9"},type:"default",title:"Publishing to package registries",content:(0,Rn.C)(v||(v=(0,On.Z)(['\n        You can configure your workflow to publish your Node.js package to a package registry after your CI tests pass. For more information about publishing to npm and GitHub Packages, see "[Publishing Node.js packages](/actions/automating-your-workflow-with-github-actions/publishing-nodejs-packages)."\n      '])))}],codeBlocks:{0:{fileName:".github/workflows/example.yml",language:"yaml",code:(0,Rn.C)(w||(w=(0,On.Z)(["\n        name: Node.js CI\n\n        on:\n          push:\n            branches: [ main ]\n          pull_request:\n            branches: [ main ]\n\n        jobs:\n          build:\n\n            runs-on: ubuntu-latest\n\n            strategy:\n              matrix:\n                node-version: [10.x, 12.x, 14.x, 15.x]\n\n            steps:\n              - uses: actions/checkout@v2\n              - name: Use Node.js ${{ matrix.node-version }}\n                uses: actions/setup-node@v2\n                with:\n                  node-version: ${{ matrix.node-version }}\n              - name: Install dependencies\n                run: npm ci\n              - run: npm run build --if-present\n              - run: npm test\n      "],["\n        name: Node.js CI\n\n        on:\n          push:\n            branches: [ main ]\n          pull_request:\n            branches: [ main ]\n\n        jobs:\n          build:\n\n            runs-on: ubuntu-latest\n\n            strategy:\n              matrix:\n                node-version: [10.x, 12.x, 14.x, 15.x]\n\n            steps:\n              - uses: actions/checkout@v2\n              - name: Use Node.js \\${{ matrix.node-version }}\n                uses: actions/setup-node@v2\n                with:\n                  node-version: \\${{ matrix.node-version }}\n              - name: Install dependencies\n                run: npm ci\n              - run: npm run build --if-present\n              - run: npm test\n      "])))},1:{fileName:".github/workflows/example.yml",language:"yaml",code:(0,Rn.C)(k||(k=(0,On.Z)(["\n        name: Node.js CI\n\n        on:\n          push:\n            branches: [ main ]\n          pull_request:\n            branches: [ main ]\n\n        jobs:\n          build:\n\n            runs-on: ubuntu-latest\n\n            strategy:\n              matrix:\n                node-version: [8.16.2, 10.17.0]\n\n            steps:\n              - uses: actions/checkout@v2\n              - name: Use Node.js ${{ matrix.node-version }}\n                uses: actions/setup-node@v2\n                with:\n                  node-version: ${{ matrix.node-version }}\n              - name: Install dependencies\n                run: npm ci\n              - run: npm run build --if-present\n              - run: npm test\n      "],["\n        name: Node.js CI\n\n        on:\n          push:\n            branches: [ main ]\n          pull_request:\n            branches: [ main ]\n\n        jobs:\n          build:\n\n            runs-on: ubuntu-latest\n\n            strategy:\n              matrix:\n                node-version: [8.16.2, 10.17.0]\n\n            steps:\n              - uses: actions/checkout@v2\n              - name: Use Node.js \\${{ matrix.node-version }}\n                uses: actions/setup-node@v2\n                with:\n                  node-version: \\${{ matrix.node-version }}\n              - name: Install dependencies\n                run: npm ci\n              - run: npm run build --if-present\n              - run: npm test\n      "])))},2:{fileName:".github/workflows/example.yml",language:"yaml",code:(0,Rn.C)(j||(j=(0,On.Z)(["\n      name: Node.js CI\n\n      on:\n        push:\n          branches: [ main ]\n        pull_request:\n          branches: [ main ]\n      \n      jobs:\n        build:\n      \n          runs-on: ubuntu-latest\n      \n          steps:\n            - uses: actions/checkout@v2\n            - name: Use Node.js\n              uses: actions/setup-node@v1\n              with:\n                node-version: '12.x'\n            - name: Install dependencies\n              run: npm ci\n            - run: npm run build --if-present\n            - run: npm test\n      "])))},3:{fileName:".github/workflows/example.yml",language:"yaml",code:(0,Rn.C)(x||(x=(0,On.Z)(["\n      name: Node.js CI\n\n      on:\n        push:\n          branches: [ main ]\n        pull_request:\n          branches: [ main ]\n      \n      jobs:\n        build:\n      \n          runs-on: ubuntu-latest\n      \n          steps:\n            - uses: actions/checkout@v2\n            - name: Use Node.js\n              uses: actions/setup-node@v1\n              with:\n                node-version: '12.x'\n            - name: Install dependencies\n              run: npm install\n            - run: npm run build --if-present\n            - run: npm test\n      "])))},4:{fileName:".github/workflows/example.yml",language:"yaml",code:(0,Rn.C)(C||(C=(0,On.Z)(["\n      name: Node.js CI\n\n      on:\n        push:\n          branches: [ main ]\n        pull_request:\n          branches: [ main ]\n      \n      jobs:\n        build:\n      \n          runs-on: ubuntu-latest\n      \n          steps:\n            - uses: actions/checkout@v2\n            - name: Use Node.js\n              uses: actions/setup-node@v1\n              with:\n                node-version: '12.x'\n            - name: Install dependencies\n              run: npm install\n            - run: npm run build --if-present\n            - run: npm test\n      "])))},5:{fileName:".github/workflows/example.yml",language:"yaml",code:(0,Rn.C)(N||(N=(0,On.Z)(["\n      name: Node.js CI\n\n      on:\n        push:\n          branches: [ main ]\n        pull_request:\n          branches: [ main ]\n      \n      jobs:\n        build:\n      \n          runs-on: ubuntu-latest\n      \n          steps:\n            - uses: actions/checkout@v2\n            - name: Use Node.js\n              uses: actions/setup-node@v1\n              with:\n                node-version: '12.x'\n            - name: Install dependencies\n              run: yarn\n            - run: yarn run build\n            - run: yarn run test\n      "])))},6:{fileName:".github/workflows/example.yml",language:"yaml",code:(0,Rn.C)(P||(P=(0,On.Z)(["\n      name: Node.js CI\n\n      on:\n        push:\n          branches: [ main ]\n        pull_request:\n          branches: [ main ]\n      \n      jobs:\n        build:\n      \n          runs-on: ubuntu-latest\n      \n          steps:\n            - uses: actions/checkout@v2\n            - name: Use Node.js\n              uses: actions/setup-node@v1\n              with:\n                node-version: '12.x'\n            - name: Install dependencies\n              run: yarn --frozen-lockfile\n            - run: yarn run build\n            - run: yarn run test\n      "])))},7:[{fileName:".github/workflows/example.yml",language:"yaml",code:(0,Rn.C)(T||(T=(0,On.Z)(["\n      name: Node.js CI\n\n      on:\n        push:\n          branches: [ main ]\n        pull_request:\n          branches: [ main ]\n      \n      jobs:\n        build:\n      \n          runs-on: ubuntu-latest\n\n          steps:\n            - uses: actions/checkout@v2\n            - name: Use Node.js\n              uses: actions/setup-node@v1\n              with:\n                always-auth: true\n                node-version: '12.x'\n                registry-url: https://registry.npmjs.org\n                scope: '@octocat'\n            - name: Install dependencies\n              run: npm ci\n              env:\n                NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}\n      "],["\n      name: Node.js CI\n\n      on:\n        push:\n          branches: [ main ]\n        pull_request:\n          branches: [ main ]\n      \n      jobs:\n        build:\n      \n          runs-on: ubuntu-latest\n\n          steps:\n            - uses: actions/checkout@v2\n            - name: Use Node.js\n              uses: actions/setup-node@v1\n              with:\n                always-auth: true\n                node-version: '12.x'\n                registry-url: https://registry.npmjs.org\n                scope: '@octocat'\n            - name: Install dependencies\n              run: npm ci\n              env:\n                NODE_AUTH_TOKEN: \\${{secrets.NPM_TOKEN}}\n      "])))},{fileName:".npmrc",language:"ini",code:(0,Rn.C)(I||(I=(0,On.Z)(["\n        //registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}\n        @octocat:registry=https://registry.npmjs.org/\n        always-auth=true\n      "],["\n        //registry.npmjs.org/:_authToken=\\${NODE_AUTH_TOKEN}\n        @octocat:registry=https://registry.npmjs.org/\n        always-auth=true\n      "])))}],8:{fileName:".github/workflows/example.yml",language:"yaml",code:(0,Rn.C)(A||(A=(0,On.Z)(["\n      name: Node.js CI\n\n      on:\n        push:\n          branches: [ main ]\n        pull_request:\n          branches: [ main ]\n      \n      jobs:\n        build:\n      \n          runs-on: ubuntu-latest\n\n          steps:\n            - uses: actions/checkout@v2\n            - name: Use Node.js\n              uses: actions/setup-node@v1\n              with:\n                node-version: '12.x'\n                cache: 'npm'\n            - name: Install dependencies\n              run: npm ci\n      "])))},9:{fileName:".github/workflows/example.yml",language:"yaml",code:(0,Rn.C)(S||(S=(0,On.Z)(["\n          name: Node.js CI\n\n          on:\n            push:\n              branches: [ main ]\n            pull_request:\n              branches: [ main ]\n\n          jobs:\n            build:\n\n              runs-on: ubuntu-latest\n\n              steps:\n                - uses: actions/checkout@v2\n                - name: Use Node.js\n                  uses: actions/setup-node@v1\n                  with:\n                    node-version: '12.x'\n                - run: npm install\n                - run: npm run build --if-present\n                - run: npm test\n        "])))}}},Dn={title:"Building and testing Python",shortTitle:"Build & test Python",topics:["CI","Python"],type:"tutorial",slug:"/actions/automating-builds-and-tests/building-and-testing-nodejs-or-python",originalArticle:"/actions/automating-builds-and-tests/building-and-testing-python",codeLanguageId:"py",intro:(0,Rn.C)(O||(O=(0,On.Z)(['\n    This guide shows you how to build, test, and publish a Python package.\n\n    GitHub-hosted runners have a tools cache with pre-installed software, which includes Python and PyPy. You don\'t have to install anything! For a full list of up-to-date software and the pre-installed versions of Python and PyPy, see "[Specifications for GitHub-hosted runners](/actions/reference/specifications-for-github-hosted-runners/#supported-software)".\n  ']))),prerequisites:(0,Rn.C)(R||(R=(0,On.Z)(['\n    You should be familiar with YAML and the syntax for GitHub Actions. For more information, see "[Learn GitHub-Actions](/actions/learn-github-actions)."\n\n    We recommend that you have a basic understanding of Python, PyPy, and pip. For more information, see:\n    - [Getting started with Python](https://www.python.org/about/gettingstarted/)\n    - [PyPy](https://pypy.org/)\n    - [Pip package manager](https://pypi.org/project/pip/)\n  ']))),contentBlocks:[{type:"default",codeBlock:{id:"0"},title:"Using the Python starter workflow",content:(0,Rn.C)(E||(E=(0,On.Z)(["\n        GitHub provides a Python starter workflow that should work for most Python projects. This guide includes examples that you can use to customize the starter workflow. For more information, see the [Python starter workflow](https://github.com/actions/starter-workflows/blob/main/ci/python-package.yml).\n\n        To get started quickly, add the starter workflow to the `.github/workflows` directory of your repository.\n      "],["\n        GitHub provides a Python starter workflow that should work for most Python projects. This guide includes examples that you can use to customize the starter workflow. For more information, see the [Python starter workflow](https://github.com/actions/starter-workflows/blob/main/ci/python-package.yml).\n\n        To get started quickly, add the starter workflow to the \\`.github/workflows\\` directory of your repository.\n      "])))},{type:"default",codeBlock:{id:"0"},title:"Specifying a Python version",content:(0,Rn.C)(D||(D=(0,On.Z)(['\n        To use a pre-installed version of Python or PyPy on a GitHub-hosted runner, use the `setup-python` action. This action finds a specific version of Python or PyPy from the tools cache on each runner and adds the necessary binaries to `PATH`, which persists for the rest of the job. If a specific version of Python is not pre-installed in the tools cache, the `setup-python` action will download and set up the appropriate version from the [`python-versions`](https://github.com/actions/python-versions) repository.\n\n        Using the `setup-python` action is the recommended way of using Python with GitHub Actions because it ensures consistent behavior across different runners and different versions of Python. If you are using a self-hosted runner, you must install Python and add it to `PATH`. For more information, see the [`setup-python` action](https://github.com/marketplace/actions/setup-python).\n        \n        The table below describes the locations for the tools cache in each GitHub-hosted runner.\n        \n        || Ubuntu | Mac | Windows |\n        |------|-------|------|----------|\n        |**Tool Cache Directory** |`/opt/hostedtoolcache/*`|`/Users/runner/hostedtoolcache/*`|`C:hostedtoolcachewindows*`|\n        |**Python Tool Cache**|`/opt/hostedtoolcache/Python/*`|`/Users/runner/hostedtoolcache/Python/*`|`C:hostedtoolcachewindowsPython*`|\n        |**PyPy Tool Cache**|`/opt/hostedtoolcache/PyPy/*`|`/Users/runner/hostedtoolcache/PyPy/*`|`C:hostedtoolcachewindowsPyPy*`|\n        \n        If you are using a self-hosted runner, you can configure the runner to use the `setup-python` action to manage your dependencies. For more information, see [using setup-python with a self-hosted runner](https://github.com/actions/setup-python#using-setup-python-with-a-self-hosted-runner) in the `setup-python` README.\n        \n        GitHub supports semantic versioning syntax. For more information, see "[Using semantic versioning](https://docs.npmjs.com/about-semantic-versioning#using-semantic-versioning-to-specify-update-types-your-package-can-accept)" and the "[Semantic versioning specification](https://semver.org/)."\n      '],['\n        To use a pre-installed version of Python or PyPy on a GitHub-hosted runner, use the \\`setup-python\\` action. This action finds a specific version of Python or PyPy from the tools cache on each runner and adds the necessary binaries to \\`PATH\\`, which persists for the rest of the job. If a specific version of Python is not pre-installed in the tools cache, the \\`setup-python\\` action will download and set up the appropriate version from the [\\`python-versions\\`](https://github.com/actions/python-versions) repository.\n\n        Using the \\`setup-python\\` action is the recommended way of using Python with GitHub Actions because it ensures consistent behavior across different runners and different versions of Python. If you are using a self-hosted runner, you must install Python and add it to \\`PATH\\`. For more information, see the [\\`setup-python\\` action](https://github.com/marketplace/actions/setup-python).\n        \n        The table below describes the locations for the tools cache in each GitHub-hosted runner.\n        \n        || Ubuntu | Mac | Windows |\n        |------|-------|------|----------|\n        |**Tool Cache Directory** |\\`/opt/hostedtoolcache/*\\`|\\`/Users/runner/hostedtoolcache/*\\`|\\`C:\\hostedtoolcache\\windows\\*\\`|\n        |**Python Tool Cache**|\\`/opt/hostedtoolcache/Python/*\\`|\\`/Users/runner/hostedtoolcache/Python/*\\`|\\`C:\\hostedtoolcache\\windows\\Python\\*\\`|\n        |**PyPy Tool Cache**|\\`/opt/hostedtoolcache/PyPy/*\\`|\\`/Users/runner/hostedtoolcache/PyPy/*\\`|\\`C:\\hostedtoolcache\\windows\\PyPy\\*\\`|\n        \n        If you are using a self-hosted runner, you can configure the runner to use the \\`setup-python\\` action to manage your dependencies. For more information, see [using setup-python with a self-hosted runner](https://github.com/actions/setup-python#using-setup-python-with-a-self-hosted-runner) in the \\`setup-python\\` README.\n        \n        GitHub supports semantic versioning syntax. For more information, see "[Using semantic versioning](https://docs.npmjs.com/about-semantic-versioning#using-semantic-versioning-to-specify-update-types-your-package-can-accept)" and the "[Semantic versioning specification](https://semver.org/)."\n      '])))},{type:"sub-section",codeBlock:{id:"1"},title:"Using multiple Python versions",content:(0,Rn.C)(U||(U=(0,On.Z)(['\n        This example uses a matrix to run the job on multiple Python versions: 2.7, 3.6, 3.7, 3.8, and 3.9. For more information about matrix strategies and contexts, see "[Workflow syntax for GitHub Actions](/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix)" and "[Context and expression syntax for GitHub Actions](/actions/reference/context-and-expression-syntax-for-github-actions)."\n      '])))},{type:"sub-section",codeBlock:{id:"2"},title:"Using a specific Python version",content:(0,Rn.C)(F||(F=(0,On.Z)(["\n        You can configure a specific version of python. For example, 3.8. Alternatively, you can use semantic version syntax to get the latest minor release. This example uses the latest minor release of Python 3.\n      "])))},{type:"sub-section",codeBlock:{id:"3"},title:"Excluding a version",content:(0,Rn.C)(_||(_=(0,On.Z)(['\n        If you specify a version of Python that is not available, `setup-python` fails with an error such as: `##[error]Version 3.4 with arch x64 not found`. The error message includes the available versions.\n\n        You can also use the `exclude` keyword in your workflow if there is a configuration of Python that you do not wish to run. For more information, see "[Workflow syntax for GitHub Actions](/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstrategy)."\n      '],['\n        If you specify a version of Python that is not available, \\`setup-python\\` fails with an error such as: \\`##[error]Version 3.4 with arch x64 not found\\`. The error message includes the available versions.\n\n        You can also use the \\`exclude\\` keyword in your workflow if there is a configuration of Python that you do not wish to run. For more information, see "[Workflow syntax for GitHub Actions](/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#jobsjob_idstrategy)."\n      '])))},{type:"sub-section",codeBlock:{id:"3"},title:"Using the default Python version",content:(0,Rn.C)(Z||(Z=(0,On.Z)(["\n        We recommend using `setup-python` to configure the version of Python used in your workflows because it helps make your dependencies explicit. If you don't use `setup-python`, the default version of Python set in `PATH` is used in any shell when you call `python`. The default version of Python varies between GitHub-hosted runners, which may cause unexpected changes or use an older version than expected.\n\n        | GitHub-hosted runner | Description |\n        |----|----|\n        | Ubuntu | Ubuntu runners have multiple versions of system Python installed under `/usr/bin/python` and `/usr/bin/python3`. The Python versions that come packaged with Ubuntu are in addition to the versions that GitHub installs in the tools cache. |\n        | Windows | Excluding the versions of Python that are in the tools cache, Windows does not ship with an equivalent version of system Python. To maintain consistent behavior with other runners and to allow Python to be used out-of-the-box without the `setup-python` action, GitHub adds a few versions from the tools cache to `PATH`.|\n        | macOS | The macOS runners have more than one version of system Python installed, in addition to the versions that are part of the tools cache. The system Python versions are located in the `/usr/local/Cellar/python/*` directory. |\n      "],["\n        We recommend using \\`setup-python\\` to configure the version of Python used in your workflows because it helps make your dependencies explicit. If you don't use \\`setup-python\\`, the default version of Python set in \\`PATH\\` is used in any shell when you call \\`python\\`. The default version of Python varies between GitHub-hosted runners, which may cause unexpected changes or use an older version than expected.\n\n        | GitHub-hosted runner | Description |\n        |----|----|\n        | Ubuntu | Ubuntu runners have multiple versions of system Python installed under \\`/usr/bin/python\\` and \\`/usr/bin/python3\\`. The Python versions that come packaged with Ubuntu are in addition to the versions that GitHub installs in the tools cache. |\n        | Windows | Excluding the versions of Python that are in the tools cache, Windows does not ship with an equivalent version of system Python. To maintain consistent behavior with other runners and to allow Python to be used out-of-the-box without the \\`setup-python\\` action, GitHub adds a few versions from the tools cache to \\`PATH\\`.|\n        | macOS | The macOS runners have more than one version of system Python installed, in addition to the versions that are part of the tools cache. The system Python versions are located in the \\`/usr/local/Cellar/python/*\\` directory. |\n      "])))},{type:"default",codeBlock:{id:"4"},title:"Installing dependencies",content:(0,Rn.C)(B||(B=(0,On.Z)(['\n        GitHub-hosted runners have the pip package manager installed. You can use pip to install dependencies from the PyPI package registry before building and testing your code. This example installs or upgrades the `pip` package installer and the `setuptools` and `wheel` packages.\n\n        When using GitHub-hosted runners, you can also cache dependencies to speed up your workflow. For more information, see "[Caching dependencies to speed up workflows](/actions/guides/caching-dependencies-to-speed-up-workflows)."\n      '],['\n        GitHub-hosted runners have the pip package manager installed. You can use pip to install dependencies from the PyPI package registry before building and testing your code. This example installs or upgrades the \\`pip\\` package installer and the \\`setuptools\\` and \\`wheel\\` packages.\n\n        When using GitHub-hosted runners, you can also cache dependencies to speed up your workflow. For more information, see "[Caching dependencies to speed up workflows](/actions/guides/caching-dependencies-to-speed-up-workflows)."\n      '])))},{type:"sub-section",codeBlock:{id:"5"},title:"Requirements file",content:(0,Rn.C)(G||(G=(0,On.Z)(["\n        After you update `pip`, a typical next step is to install dependencies from *requirements.txt*.\n      "],["\n        After you update \\`pip\\`, a typical next step is to install dependencies from *requirements.txt*.\n      "])))},{type:"sub-section",codeBlock:{id:"6"},title:"Caching Dependencies",content:(0,Rn.C)(H||(H=(0,On.Z)(["\n\n        When using GitHub-hosted runners, you can cache and restore the dependencies using the [`setup-python` action](https://github.com/actions/setup-python). By default, the `setup-python` action searches for the dependency file (`requirements.txt` for pip or `Pipfile.lock` for pipenv) in the whole repository.\n\n        If you have a custom requirement or need finer controls for caching, you can use the [`cache` action](https://github.com/marketplace/actions/cache). Pip caches dependencies in different locations, depending on the operating system of the runner. The path you'll need to cache may differ from the Ubuntu example shown here, depending on the operating system you use. For more information, see [Caching dependencies to speed up workflows](/actions/guides/caching-dependencies-to-speed-up-workflows) and the [`cache` action](https://github.com/marketplace/actions/cache).\n\n      "],["\n\n        When using GitHub-hosted runners, you can cache and restore the dependencies using the [\\`setup-python\\` action](https://github.com/actions/setup-python). By default, the \\`setup-python\\` action searches for the dependency file (\\`requirements.txt\\` for pip or \\`Pipfile.lock\\` for pipenv) in the whole repository.\n\n        If you have a custom requirement or need finer controls for caching, you can use the [\\`cache\\` action](https://github.com/marketplace/actions/cache). Pip caches dependencies in different locations, depending on the operating system of the runner. The path you'll need to cache may differ from the Ubuntu example shown here, depending on the operating system you use. For more information, see [Caching dependencies to speed up workflows](/actions/guides/caching-dependencies-to-speed-up-workflows) and the [\\`cache\\` action](https://github.com/marketplace/actions/cache).\n\n      "])))},{type:"default",codeBlock:{id:"7"},title:"Testing your code",content:(0,Rn.C)(L||(L=(0,On.Z)(["\n        You can use the same commands that you use locally to build and test your code.\n      "])))},{type:"sub-section",codeBlock:{id:"7"},title:"Testing with pytest and pytest-cov",content:(0,Rn.C)(V||(V=(0,On.Z)(["\n        This example installs or upgrades `pytest` and `pytest-cov`. Tests are then run and output in JUnit format while code coverage results are output in Cobertura. For more information, see [JUnit](https://junit.org/junit5/) and [Cobertura](https://cobertura.github.io/cobertura/).\n      "],["\n        This example installs or upgrades \\`pytest\\` and \\`pytest-cov\\`. Tests are then run and output in JUnit format while code coverage results are output in Cobertura. For more information, see [JUnit](https://junit.org/junit5/) and [Cobertura](https://cobertura.github.io/cobertura/).\n      "])))},{type:"sub-section",codeBlock:{id:"8"},title:"Using Flake8 to lint code",content:(0,Rn.C)(M||(M=(0,On.Z)(["\n        This example installs or upgrades `flake8` and uses it to lint all files. For more information, see [Flake8](http://flake8.pycqa.org/en/latest/).\n      "],["\n        This example installs or upgrades \\`flake8\\` and uses it to lint all files. For more information, see [Flake8](http://flake8.pycqa.org/en/latest/).\n      "])))},{type:"sub-section",codeBlock:{id:"9"},title:"Running tests with tox",content:(0,Rn.C)(Y||(Y=(0,On.Z)(["\n        With GitHub Actions, you can run tests with tox and spread the work across multiple jobs. You'll need to invoke tox using the `-e py` option to choose the version of Python in your `PATH`, rather than specifying a specific version. For more information, see [tox](https://tox.readthedocs.io/en/latest/).\n      "],["\n        With GitHub Actions, you can run tests with tox and spread the work across multiple jobs. You'll need to invoke tox using the \\`-e py\\` option to choose the version of Python in your \\`PATH\\`, rather than specifying a specific version. For more information, see [tox](https://tox.readthedocs.io/en/latest/).\n      "])))},{type:"default",codeBlock:{id:"10"},title:"Packaging workflow data as artifacts",content:(0,Rn.C)(z||(z=(0,On.Z)(['\n        You can upload artifacts to view after a workflow completes. For example, you may need to save log files, core dumps, test results, or screenshots. For more information, see "[Persisting workflow data using artifacts](/github/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts)."\n\n        This example demonstrates how you can use the `upload-artifact` action to archive test results from running `pytest`. For more information, see the [`upload-artifact` action](https://github.com/actions/upload-artifact).\n      '],['\n        You can upload artifacts to view after a workflow completes. For example, you may need to save log files, core dumps, test results, or screenshots. For more information, see "[Persisting workflow data using artifacts](/github/automating-your-workflow-with-github-actions/persisting-workflow-data-using-artifacts)."\n\n        This example demonstrates how you can use the \\`upload-artifact\\` action to archive test results from running \\`pytest\\`. For more information, see the [\\`upload-artifact\\` action](https://github.com/actions/upload-artifact).\n      '])))},{type:"default",codeBlock:{id:"11"},title:"Publishing to package registries",content:(0,Rn.C)(W||(W=(0,On.Z)(['\n        You can configure your workflow to publish your Python package to a package registry once your CI tests pass. This example demonstrates how you can use GitHub Actions to upload your package to PyPI each time you [publish a release](/github/administering-a-repository/managing-releases-in-a-repository). \n\n        For this example, you will need to create two [PyPI API tokens](https://pypi.org/help/#apitoken). You can use secrets to store the access tokens or credentials needed to publish your package. For more information, see "[Creating and using encrypted secrets](/github/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)."\n\n        For more information about the starter workflow, see [`python-publish`](https://github.com/actions/starter-workflows/blob/main/ci/python-publish.yml).\n      '],['\n        You can configure your workflow to publish your Python package to a package registry once your CI tests pass. This example demonstrates how you can use GitHub Actions to upload your package to PyPI each time you [publish a release](/github/administering-a-repository/managing-releases-in-a-repository). \n\n        For this example, you will need to create two [PyPI API tokens](https://pypi.org/help/#apitoken). You can use secrets to store the access tokens or credentials needed to publish your package. For more information, see "[Creating and using encrypted secrets](/github/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)."\n\n        For more information about the starter workflow, see [\\`python-publish\\`](https://github.com/actions/starter-workflows/blob/main/ci/python-publish.yml).\n      '])))}],codeBlocks:{0:{language:"yaml",fileName:".github/workflows/example.yml",code:(0,Rn.C)($||($=(0,On.Z)(["\n      name: Python package\n\n      on: [push]\n\n      jobs:\n        build:\n\n          runs-on: ubuntu-latest\n          strategy:\n            matrix:\n              python-version: [3.6, 3.7, 3.8, 3.9]\n\n          steps:\n            - uses: actions/checkout@v2\n            - name: Set up Python ${{ matrix.python-version }}\n              uses: actions/setup-python@v2\n              with:\n                python-version: ${{ matrix.python-version }}\n            - name: Install dependencies\n              run: |\n                python -m pip install --upgrade pip\n                pip install flake8 pytest\n                if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n            - name: Lint with flake8\n              run: |\n                # stop the build if there are Python syntax errors or undefined names\n                flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n                # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n                flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n            - name: Test with pytest\n              run: |\n                pytest\n      "],["\n      name: Python package\n\n      on: [push]\n\n      jobs:\n        build:\n\n          runs-on: ubuntu-latest\n          strategy:\n            matrix:\n              python-version: [3.6, 3.7, 3.8, 3.9]\n\n          steps:\n            - uses: actions/checkout@v2\n            - name: Set up Python \\${{ matrix.python-version }}\n              uses: actions/setup-python@v2\n              with:\n                python-version: \\${{ matrix.python-version }}\n            - name: Install dependencies\n              run: |\n                python -m pip install --upgrade pip\n                pip install flake8 pytest\n                if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n            - name: Lint with flake8\n              run: |\n                # stop the build if there are Python syntax errors or undefined names\n                flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n                # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n                flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n            - name: Test with pytest\n              run: |\n                pytest\n      "])))},1:{language:"yaml",fileName:".github/workflows/example.yml",code:(0,Rn.C)(q||(q=(0,On.Z)(['\n      name: Python package\n\n      on: [push]\n\n      jobs:\n        build:\n\n          runs-on: ubuntu-latest\n          strategy:\n            # You can use PyPy versions in python-version.\n            # For example, pypy2 and pypy3\n            matrix:\n              python-version: [2.7, 3.6, 3.7, 3.8, 3.9]\n\n          steps:\n            - uses: actions/checkout@v2\n            - name: Set up Python ${{ matrix.python-version }}\n              uses: actions/setup-python@v2\n              with:\n                python-version: ${{ matrix.python-version }}\n            # You can test your matrix by printing the current Python version\n            - name: Display Python version\n              run: python -c "import sys; print(sys.version)"\n      '],['\n      name: Python package\n\n      on: [push]\n\n      jobs:\n        build:\n\n          runs-on: ubuntu-latest\n          strategy:\n            # You can use PyPy versions in python-version.\n            # For example, pypy2 and pypy3\n            matrix:\n              python-version: [2.7, 3.6, 3.7, 3.8, 3.9]\n\n          steps:\n            - uses: actions/checkout@v2\n            - name: Set up Python \\${{ matrix.python-version }}\n              uses: actions/setup-python@v2\n              with:\n                python-version: \\${{ matrix.python-version }}\n            # You can test your matrix by printing the current Python version\n            - name: Display Python version\n              run: python -c "import sys; print(sys.version)"\n      '])))},2:{language:"yaml",fileName:".github/workflows/example.yml",code:(0,Rn.C)(J||(J=(0,On.Z)(["\n      name: Python package\n\n      on: [push]\n\n      jobs:\n        build:\n\n          runs-on: ubuntu-latest\n\n          steps:\n            - uses: actions/checkout@v2\n            - name: Set up Python 3.x\n              uses: actions/setup-python@v2\n              with:\n                # Semantic version range syntax or exact version of a Python version\n                python-version: '3.x'\n                # Optional - x64 or x86 architecture, defaults to x64\n                architecture: 'x64'\n            # You can test your matrix by printing the current Python version\n            - name: Display Python version\n              run: python -c \"import sys; print(sys.version)\"\n      "])))},3:{language:"yaml",fileName:".github/workflows/example.yml",code:(0,Rn.C)(K||(K=(0,On.Z)(["\n      name: Python package\n\n      on: [push]\n\n      jobs:\n        build:\n\n          runs-on: ${{ matrix.os }}\n          strategy:\n            matrix:\n              os: [ubuntu-latest, macos-latest, windows-latest]\n              python-version: [3.6, 3.7, 3.8, 3.9, pypy2, pypy3]\n              exclude:\n                - os: macos-latest\n                  python-version: 3.6\n                - os: windows-latest\n                  python-version: 3.6\n      "],["\n      name: Python package\n\n      on: [push]\n\n      jobs:\n        build:\n\n          runs-on: \\${{ matrix.os }}\n          strategy:\n            matrix:\n              os: [ubuntu-latest, macos-latest, windows-latest]\n              python-version: [3.6, 3.7, 3.8, 3.9, pypy2, pypy3]\n              exclude:\n                - os: macos-latest\n                  python-version: 3.6\n                - os: windows-latest\n                  python-version: 3.6\n      "])))},4:{language:"yaml",fileName:".github/workflows/example.yml",code:(0,Rn.C)(X||(X=(0,On.Z)(["\n        name: Python package\n\n        on: [push]\n\n        jobs:\n          build:\n\n            runs-on: ubuntu-latest\n            steps:\n              - uses: actions/checkout@v2\n              - name: Set up Python\n                uses: actions/setup-python@v2\n                with:\n                  python-version: '3.x'\n              - name: Install dependencies\n                run: python -m pip install --upgrade pip setuptools wheel\n        "])))},5:{language:"yaml",fileName:".github/workflows/example.yml",code:(0,Rn.C)(Q||(Q=(0,On.Z)(["\n        name: Python package\n\n        on: [push]\n\n        jobs:\n          build:\n\n            runs-on: ubuntu-latest\n            steps:\n            - uses: actions/checkout@v2\n            - name: Set up Python\n              uses: actions/setup-python@v2\n              with:\n                python-version: '3.x'\n            - name: Install dependencies\n              run: |\n                python -m pip install --upgrade pip\n                pip install -r requirements.txt\n        "])))},6:{language:"yaml",fileName:".github/workflows/example.yml",code:(0,Rn.C)(ee||(ee=(0,On.Z)(["\n        name: Python package\n\n        on: [push]\n\n        jobs:\n          build:\n\n            runs-on: ubuntu-latest\n            steps:\n            - uses: actions/checkout@v2\n            - name: Setup Python\n              uses: actions/setup-python@v2\n              with:\n                python-version: '3.x'\n                cache: 'pip'\n            - name: Install dependencies\n              run: pip install -r requirements.txt\n        "])))},7:{language:"yaml",fileName:".github/workflows/example.yml",code:(0,Rn.C)(ne||(ne=(0,On.Z)(["\n        name: Python package\n\n        on: [push]\n\n        jobs:\n          build:\n\n            runs-on: ubuntu-latest\n            steps:\n            - uses: actions/checkout@v2\n            - name: Set up Python\n              uses: actions/setup-python@v2\n              with:\n                python-version: '3.x'\n            - name: Install dependencies\n              run: |\n                python -m pip install --upgrade pip\n                pip install -r requirements.txt\n            - name: Test with pytest\n              run: |\n                pip install pytest\n                pip install pytest-cov\n                pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html\n        "])))},8:{language:"yaml",fileName:".github/workflows/example.yml",code:(0,Rn.C)(te||(te=(0,On.Z)(["\n        name: Python package\n\n        on: [push]\n\n        jobs:\n          build:\n\n            runs-on: ubuntu-latest\n            steps:\n            - uses: actions/checkout@v2\n            - name: Set up Python\n              uses: actions/setup-python@v2\n              with:\n                python-version: '3.x'\n            - name: Install dependencies\n              run: |\n                python -m pip install --upgrade pip\n                pip install -r requirements.txt\n            - name: Lint with flake8\n              run: |\n                pip install flake8\n                flake8 .\n        "])))},9:{language:"yaml",fileName:".github/workflows/example.yml",code:(0,Rn.C)(oe||(oe=(0,On.Z)(["\n        name: Python package\n\n        on: [push]\n\n        jobs:\n          build:\n\n            runs-on: ubuntu-latest\n            strategy:\n              matrix:\n                python: [3.7, 3.8, 3.9]\n\n            steps:\n              - uses: actions/checkout@v2\n              - name: Setup Python\n                uses: actions/setup-python@v2\n                with:\n                  python-version: ${{ matrix.python }}\n              - name: Install Tox and any other packages\n                run: pip install tox\n              - name: Run Tox\n                # Run tox using the version of Python in `PATH`\n                run: tox -e py\n      "],["\n        name: Python package\n\n        on: [push]\n\n        jobs:\n          build:\n\n            runs-on: ubuntu-latest\n            strategy:\n              matrix:\n                python: [3.7, 3.8, 3.9]\n\n            steps:\n              - uses: actions/checkout@v2\n              - name: Setup Python\n                uses: actions/setup-python@v2\n                with:\n                  python-version: \\${{ matrix.python }}\n              - name: Install Tox and any other packages\n                run: pip install tox\n              - name: Run Tox\n                # Run tox using the version of Python in \\`PATH\\`\n                run: tox -e py\n      "])))},10:{language:"yaml",fileName:".github/workflows/example.yml",code:(0,Rn.C)(se||(se=(0,On.Z)(["\n        name: Python package\n\n        on: [push]\n        \n        jobs:\n          build:\n        \n            runs-on: ubuntu-latest\n            strategy:\n              matrix:\n                python-version: [3.6, 3.7, 3.8, 3.9]\n        \n            steps:\n              - uses: actions/checkout@v2\n              - name: Setup Python # Set Python version\n                uses: actions/setup-python@v2\n                with:\n                  python-version: ${{ matrix.python-version }}\n              # Install pip and pytest\n              - name: Install dependencies\n                run: |\n                  python -m pip install --upgrade pip\n                  pip install pytest\n              - name: Test with pytest\n                run: pytest tests.py --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml\n              - name: Upload pytest test results\n                uses: actions/upload-artifact@v2\n                with:\n                  name: pytest-results-${{ matrix.python-version }}\n                  path: junit/test-results-${{ matrix.python-version }}.xml\n                # Use always() to always run this step to publish test results when there are test failures\n                if: ${{ always() }}\n      "],["\n        name: Python package\n\n        on: [push]\n        \n        jobs:\n          build:\n        \n            runs-on: ubuntu-latest\n            strategy:\n              matrix:\n                python-version: [3.6, 3.7, 3.8, 3.9]\n        \n            steps:\n              - uses: actions/checkout@v2\n              - name: Setup Python # Set Python version\n                uses: actions/setup-python@v2\n                with:\n                  python-version: \\${{ matrix.python-version }}\n              # Install pip and pytest\n              - name: Install dependencies\n                run: |\n                  python -m pip install --upgrade pip\n                  pip install pytest\n              - name: Test with pytest\n                run: pytest tests.py --doctest-modules --junitxml=junit/test-results-\\${{ matrix.python-version }}.xml\n              - name: Upload pytest test results\n                uses: actions/upload-artifact@v2\n                with:\n                  name: pytest-results-\\${{ matrix.python-version }}\n                  path: junit/test-results-\\${{ matrix.python-version }}.xml\n                # Use always() to always run this step to publish test results when there are test failures\n                if: \\${{ always() }}\n      "])))},11:{language:"yaml",fileName:".github/workflows/example.yml",code:(0,Rn.C)(ae||(ae=(0,On.Z)(["\n        # This workflow uses actions that are not certified by GitHub.\n        # They are provided by a third-party and are governed by\n        # separate terms of service, privacy policy, and support\n        # documentation.\n\n        name: Upload Python Package\n\n        on:\n          release:\n            types: [published]\n\n        jobs:\n          deploy:\n            runs-on: ubuntu-latest\n            steps:\n              - uses: actions/checkout@v2\n              - name: Set up Python\n                uses: actions/setup-python@v2\n                with:\n                  python-version: '3.x'\n              - name: Install dependencies\n                run: |\n                  python -m pip install --upgrade pip\n                  pip install build\n              - name: Build package\n                run: python -m build\n              - name: Publish package\n                uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29\n                with:\n                  user: __token__\n                  password: ${{ secrets.PYPI_API_TOKEN }}\n      "],["\n        # This workflow uses actions that are not certified by GitHub.\n        # They are provided by a third-party and are governed by\n        # separate terms of service, privacy policy, and support\n        # documentation.\n\n        name: Upload Python Package\n\n        on:\n          release:\n            types: [published]\n\n        jobs:\n          deploy:\n            runs-on: ubuntu-latest\n            steps:\n              - uses: actions/checkout@v2\n              - name: Set up Python\n                uses: actions/setup-python@v2\n                with:\n                  python-version: '3.x'\n              - name: Install dependencies\n                run: |\n                  python -m pip install --upgrade pip\n                  pip install build\n              - name: Build package\n                run: python -m build\n              - name: Publish package\n                uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29\n                with:\n                  user: __token__\n                  password: \\${{ secrets.PYPI_API_TOKEN }}\n      "])))}}},Un={title:"Add a dev container to your project",shortTitle:"Node.js Codespaces",topics:["Codespaces","Developer","Organization","Node","JavaScript"],type:"tutorial",slug:"/codespaces/setting-up-your-project-for-codespaces/setting-up-your-project-for-codespaces",originalArticle:"/codespaces/setting-up-your-project-for-codespaces/setting-up-your-nodejs-project-for-codespaces",codeLanguageId:"nodejs",intro:(0,Rn.C)(ie||(ie=(0,On.Z)(["\n  This guide shows you how to add a [dev container](/codespaces/setting-up-your-project-for-codespaces/configuring-codespaces-for-your-project) to define the Codespaces configuration for your **JavaScript**, **Node.js**, or **TypeScript** project. For other project languages, click the language button to the right.\n  "]))),prerequisites:(0,Rn.C)(re||(re=(0,On.Z)(['\n    - You should have an existing JavaScript, Node.js, or TypeScript project in a repository on GitHub.com. If you don\'t have a project, you can try this tutorial with the following example: https://github.com/microsoft/vscode-remote-try-node\n    - Codespaces must be enabled for your organization. For more information, see "[Enabling Codespaces for your organization](/codespaces/managing-codespaces-for-your-organization/enabling-codespaces-for-your-organization)."\n  ']))),contentBlocks:[{codeBlock:{id:"0"},type:"default",title:"Step 1: Open your project in a codespace",content:(0,Rn.C)(ce||(ce=(0,On.Z)(['\n        1. Under the repository name, use the **Code** drop-down menu, and in the **Codespaces** tab, click **New codespace**.\n\n            ![New codespace button](/assets/images/help/codespaces/new-codespace-button.png)\n\n           If you don\u2019t see this option, Codespaces isn\'t available for your project. See [Access to Codespaces](/codespaces/developing-in-codespaces/creating-a-codespace#access-to-codespaces) for more information.\n\n        When you create a codespace, your project is created on a remote VM that is dedicated to you. By default, the container for your codespace has many languages and runtimes including Node.js, JavaScript, Typescript, nvm, npm, and yarn. It also includes a common set of tools like git, wget, rsync, openssh, and nano.\n\n        You can customize your codespace by adjusting the amount of vCPUs and RAM, [adding dotfiles to personalize your environment](/codespaces/setting-up-your-codespace/personalizing-codespaces-for-your-account), or by modifying the tools and scripts installed.\n\n        Codespaces uses a file called `devcontainer.json` to store configurations. On launch, Codespaces uses the file to install any tools, dependencies, or other set up that might be needed for the project. For more information, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)."\n      '],['\n        1. Under the repository name, use the **Code** drop-down menu, and in the **Codespaces** tab, click **New codespace**.\n\n            ![New codespace button](/assets/images/help/codespaces/new-codespace-button.png)\n\n           If you don\u2019t see this option, Codespaces isn\'t available for your project. See [Access to Codespaces](/codespaces/developing-in-codespaces/creating-a-codespace#access-to-codespaces) for more information.\n\n        When you create a codespace, your project is created on a remote VM that is dedicated to you. By default, the container for your codespace has many languages and runtimes including Node.js, JavaScript, Typescript, nvm, npm, and yarn. It also includes a common set of tools like git, wget, rsync, openssh, and nano.\n\n        You can customize your codespace by adjusting the amount of vCPUs and RAM, [adding dotfiles to personalize your environment](/codespaces/setting-up-your-codespace/personalizing-codespaces-for-your-account), or by modifying the tools and scripts installed.\n\n        Codespaces uses a file called \\`devcontainer.json\\` to store configurations. On launch, Codespaces uses the file to install any tools, dependencies, or other set up that might be needed for the project. For more information, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)."\n      '])))},{codeBlock:{id:"0"},type:"default",title:"Step 2: Add a dev container to your codespace from a template",content:(0,Rn.C)(de||(de=(0,On.Z)(['\n        The default codespaces container will support running Node.js projects like [vscode-remote-try-node](https://github.com/microsoft/vscode-remote-try-node) out of the box. By setting up a custom container you can customize the tools and scripts that run as part of codespace creation and ensure a fully reproducible environment for all Codespaces users in your repository.\n\n        To set up your project with a custom container, you will need to use a `devcontainer.json` file to define the environment. In Codespaces you can add this either from a template or you can create your own. For more information on dev containers, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)".\n\n        1. Access the Command Palette (`Shift + Command + P` / `Ctrl + Shift + P`), then start typing "dev container". Select **Codespaces: Add Development Container Configuration Files...**.\n          !["Codespaces: Add Development Container Configuration Files..." in the command palette](/assets/images/help/codespaces/add-prebuilt-container-command.png)\n        2. For this example, click **Node.js**.  If you need additional features you can select any container that\u2019s specific to Node or a combination of tools such as Node and MongoDB.\n          ![Select Node option from the list](/assets/images/help/codespaces/add-node-prebuilt-container.png)\n        3. Click the recommended version of Node.js.\n          ![Node.js version selection](/assets/images/help/codespaces/add-node-version.png)\n        4. Select any additional features to install and click **OK**.\n        5. Access the command palette (`Shift + Command + P`/ `Ctrl + Shift + P`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n      '],['\n        The default codespaces container will support running Node.js projects like [vscode-remote-try-node](https://github.com/microsoft/vscode-remote-try-node) out of the box. By setting up a custom container you can customize the tools and scripts that run as part of codespace creation and ensure a fully reproducible environment for all Codespaces users in your repository.\n\n        To set up your project with a custom container, you will need to use a \\`devcontainer.json\\` file to define the environment. In Codespaces you can add this either from a template or you can create your own. For more information on dev containers, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)".\n\n        1. Access the Command Palette (\\`Shift + Command + P\\` / \\`Ctrl + Shift + P\\`), then start typing "dev container". Select **Codespaces: Add Development Container Configuration Files...**.\n          !["Codespaces: Add Development Container Configuration Files..." in the command palette](/assets/images/help/codespaces/add-prebuilt-container-command.png)\n        2. For this example, click **Node.js**.  If you need additional features you can select any container that\u2019s specific to Node or a combination of tools such as Node and MongoDB.\n          ![Select Node option from the list](/assets/images/help/codespaces/add-node-prebuilt-container.png)\n        3. Click the recommended version of Node.js.\n          ![Node.js version selection](/assets/images/help/codespaces/add-node-version.png)\n        4. Select any additional features to install and click **OK**.\n        5. Access the command palette (\\`Shift + Command + P\\`/ \\`Ctrl + Shift + P\\`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n      '])))},{codeBlock:{id:"0"},type:"sub-section",title:"Anatomy of your dev container",content:(0,Rn.C)(le||(le=(0,On.Z)(["\n        Adding the Node.js dev container template adds a `.devcontainer` folder to the root of your project's repository with the following files:\n\n        - `devcontainer.json`\n        - Dockerfile\n\n        The newly added `devcontainer.json` file defines a few properties that are described below.\n      "],["\n        Adding the Node.js dev container template adds a \\`.devcontainer\\` folder to the root of your project's repository with the following files:\n\n        - \\`devcontainer.json\\`\n        - Dockerfile\n\n        The newly added \\`devcontainer.json\\` file defines a few properties that are described below.\n      "])))},{type:"sub-section-2",codeBlock:{id:"0",highlight:4},content:(0,Rn.C)(ue||(ue=(0,On.Z)(["\n        **`name`** - You can name your dev container anything, this is just the default.\n      "],["\n        **\\`name\\`** - You can name your dev container anything, this is just the default.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:[5,9]},content:(0,Rn.C)(pe||(pe=(0,On.Z)(["\n        **`build`** - The build properties.\n          - **`dockerfile`** - In the build object, dockerfile is a reference to the Dockerfile that was also added from the template.\n          - **`args`**\n            - **`VARIANT`**: This file only contains one build argument, which is the node variant we want to use that is passed into the Dockerfile.\n      "],["\n        **\\`build\\`** - The build properties.\n          - **\\`dockerfile\\`** - In the build object, dockerfile is a reference to the Dockerfile that was also added from the template.\n          - **\\`args\\`**\n            - **\\`VARIANT\\`**: This file only contains one build argument, which is the node variant we want to use that is passed into the Dockerfile.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:[12,14]},content:(0,Rn.C)(he||(he=(0,On.Z)(["\n        **`settings`** - These are Visual Studio Code settings that you can set.\n          - **`terminal.integrated.shell.linux`** - While bash is the default here, you could use other terminal shells by modifying this.\n      "],["\n        **\\`settings\\`** - These are Visual Studio Code settings that you can set.\n          - **\\`terminal.integrated.shell.linux\\`** - While bash is the default here, you could use other terminal shells by modifying this.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:[17,19]},content:(0,Rn.C)(me||(me=(0,On.Z)(["\n        **`extensions`** - These are extensions included by default.\n          - **`dbaeumer.vscode-eslint`** - ES lint is a great extension for linting, but for JavaScript there are a number of great Marketplace extensions you could also include.\n      "],["\n        **\\`extensions\\`** - These are extensions included by default.\n          - **\\`dbaeumer.vscode-eslint\\`** - ES lint is a great extension for linting, but for JavaScript there are a number of great Marketplace extensions you could also include.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:22},content:(0,Rn.C)(ye||(ye=(0,On.Z)(["\n        **`forwardPorts`** - Any ports listed here will be forwarded automatically.\n      "],["\n        **\\`forwardPorts\\`** - Any ports listed here will be forwarded automatically.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:25},content:(0,Rn.C)(fe||(fe=(0,On.Z)(["\n        **`postCreateCommand`** - If you want to run anything after you land in your codespace that\u2019s not defined in the Dockerfile, you can do that here.\n      "],["\n        **\\`postCreateCommand\\`** - If you want to run anything after you land in your codespace that\u2019s not defined in the Dockerfile, you can do that here.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:28},content:(0,Rn.C)(ge||(ge=(0,On.Z)(["\n        **`remoteUser`** - By default, you\u2019re running as the vscode user, but you can optionally set this to root.\n      "],["\n        **\\`remoteUser\\`** - By default, you\u2019re running as the vscode user, but you can optionally set this to root.\n      "])))},{codeBlock:{id:"1"},type:"sub-section",title:"Dockerfile",content:(0,Rn.C)(be||(be=(0,On.Z)(["\n        You can use the Dockerfile to add additional container layers to specify OS packages, node versions, or global packages we want included in our Dockerfile.\n      "])))},{codeBlock:{id:"0",highlight:[21,25]},type:"default",title:"Step 3: Modify your devcontainer.json file",content:(0,Rn.C)(ve||(ve=(0,On.Z)(['\n        With your dev container added and a basic understanding of what everything does, you can now make changes to configure it for your environment. In this example, you\'ll add properties to install npm when your codespace launches and make a list of ports inside the container available locally.\n\n        1. In the Explorer, select the `devcontainer.json` file from the tree to open it. You might have to expand the `.devcontainer` folder to see it.\n          ![devcontainer.json file in the Explorer](/assets/images/help/codespaces/devcontainers-options.png)\n        2. Add the following lines to your `devcontainer.json` file after `extensions`:\n\n            ```js{:copy}\n            "postCreateCommand": "npm install",\n            "forwardPorts": [4000],\n            ```\n            For more information on `devcontainer.json` properties, see the [devcontainer.json reference](https://code.visualstudio.com/docs/remote/devcontainerjson-reference) in the Visual Studio Code docs.\n\n        1. Access the command palette (`Shift + Command + P`/ `Ctrl + Shift + P`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n            ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n\n              Rebuilding inside your codespace ensures your changes work as expected before you commit the changes to the repository. If something does result in a failure, you\u2019ll be placed in a codespace with a recovery container that you can rebuild from to keep adjusting your container.\n      '],['\n        With your dev container added and a basic understanding of what everything does, you can now make changes to configure it for your environment. In this example, you\'ll add properties to install npm when your codespace launches and make a list of ports inside the container available locally.\n\n        1. In the Explorer, select the \\`devcontainer.json\\` file from the tree to open it. You might have to expand the \\`.devcontainer\\` folder to see it.\n          ![devcontainer.json file in the Explorer](/assets/images/help/codespaces/devcontainers-options.png)\n        2. Add the following lines to your \\`devcontainer.json\\` file after \\`extensions\\`:\n\n            \\`\\`\\`js{:copy}\n            "postCreateCommand": "npm install",\n            "forwardPorts": [4000],\n            \\`\\`\\`\n            For more information on \\`devcontainer.json\\` properties, see the [devcontainer.json reference](https://code.visualstudio.com/docs/remote/devcontainerjson-reference) in the Visual Studio Code docs.\n\n        1. Access the command palette (\\`Shift + Command + P\\`/ \\`Ctrl + Shift + P\\`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n            ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n\n              Rebuilding inside your codespace ensures your changes work as expected before you commit the changes to the repository. If something does result in a failure, you\u2019ll be placed in a codespace with a recovery container that you can rebuild from to keep adjusting your container.\n      '])))},{codeBlock:{id:"0"},type:"default",title:"Step 4: Run your application",content:(0,Rn.C)(we||(we=(0,On.Z)(["\n        In the previous section, you used the `postCreateCommand` to installing a set of packages via npm. You can now use this to run our application with npm.\n\n        1. Run your start command in the terminal with `npm start`.\n\n            ![npm start in terminal](/assets/images/help/codespaces/codespaces-npmstart.png)\n\n        2. When your project starts, you should see a message in the bottom right corner with a prompt to connect to the port your project uses.\n\n            ![Port forwarding toast](/assets/images/help/codespaces/codespaces-port-toast.png)\n      "],["\n        In the previous section, you used the \\`postCreateCommand\\` to installing a set of packages via npm. You can now use this to run our application with npm.\n\n        1. Run your start command in the terminal with \\`npm start\\`.\n\n            ![npm start in terminal](/assets/images/help/codespaces/codespaces-npmstart.png)\n\n        2. When your project starts, you should see a message in the bottom right corner with a prompt to connect to the port your project uses.\n\n            ![Port forwarding toast](/assets/images/help/codespaces/codespaces-port-toast.png)\n      "])))},{codeBlock:{id:"0"},type:"default",title:"Step 5: Commit your changes",content:(0,Rn.C)(ke||(ke=(0,On.Z)(["\n      Once you've made changes to your codespace, either new code or configuration changes, you'll want to commit your changes. Committing changes to your repository ensures that anyone else who creates a codespace from this repository has the same configuration. This also means that any customization you do, such as adding Visual Studio Code extensions, will appear for all users.\n\n      For information, see \"[Using source control in your codespace](/codespaces/developing-in-codespaces/using-source-control-in-your-codespace#committing-your-changes).\"\n      "])))}],codeBlocks:{0:{fileName:".devcontainer/devcontainer.json",language:"json",code:(0,Rn.C)(je||(je=(0,On.Z)(['\n        // For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:\n        // https://github.com/microsoft/vscode-dev-containers/tree/v0.162.0/containers/javascript-node\n        {\n          "name": "Node.js",\n          "build": {\n            "dockerfile": "Dockerfile",\n            // Update \'VARIANT\' to pick a Node version: 10, 12, 14\n            "args": { "VARIANT": "14" }\n          },\n\n          // Set *default* container specific settings.json values on container create.\n          "settings": {\n            "terminal.integrated.shell.linux": "/bin/bash"\n          },\n\n          // Add the IDs of extensions you want installed when the container is created.\n          "extensions": [\n            "dbaeumer.vscode-eslint"\n          ],\n\n          // Use \'forwardPorts\' to make a list of ports inside the container available locally.\n          // "forwardPorts": [],\n\n          // Use \'postCreateCommand\' to run commands after the container is created.\n          // "postCreateCommand": "yarn install",\n\n          // Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.\n          "remoteUser": "node"\n        }\n      '])))},1:{fileName:".devcontainer/Dockerfile",language:"bash",code:(0,Rn.C)(xe||(xe=(0,On.Z)(['\n        # [Choice] Node.js version: 14, 12, 10\n        ARG VARIANT="14-buster"\n        FROM mcr.microsoft.com/vscode/devcontainers/javascript-node:0-${VARIANT}\n        \n        # [Optional] Uncomment this section to install additional OS packages.\n        # RUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get -y install --no-install-recommends <your-package-list-here>\n        \n        # [Optional] Uncomment if you want to install an additional version of node using nvm\n        # ARG EXTRA_NODE_VERSION=10\n        # RUN su node -c "source /usr/local/share/nvm/nvm.sh && nvm install ${EXTRA_NODE_VERSION}"\n        \n        # [Optional] Uncomment if you want to install more global node modules\n        # RUN su node -c "npm install -g <your-package-list-here>"\n      '],['\n        # [Choice] Node.js version: 14, 12, 10\n        ARG VARIANT="14-buster"\n        FROM mcr.microsoft.com/vscode/devcontainers/javascript-node:0-\\${VARIANT}\n        \n        # [Optional] Uncomment this section to install additional OS packages.\n        # RUN apt-get update && export DEBIAN_FRONTEND=noninteractive && apt-get -y install --no-install-recommends <your-package-list-here>\n        \n        # [Optional] Uncomment if you want to install an additional version of node using nvm\n        # ARG EXTRA_NODE_VERSION=10\n        # RUN su node -c "source /usr/local/share/nvm/nvm.sh && nvm install \\${EXTRA_NODE_VERSION}"\n        \n        # [Optional] Uncomment if you want to install more global node modules\n        # RUN su node -c "npm install -g <your-package-list-here>"\n      '])))}}},Fn={title:"Add a dev container to your repository",shortTitle:"Python Codespaces",topics:["Codespaces","Developer","Organization","Python"],type:"tutorial",slug:"/codespaces/setting-up-your-project-for-codespaces/setting-up-your-project-for-codespaces",originalArticle:"/codespaces/setting-up-your-project-for-codespaces/setting-up-your-python-project-for-codespaces",codeLanguageId:"py",intro:(0,Rn.C)(Ce||(Ce=(0,On.Z)(["\n    This guide shows you how to add a [dev container](/codespaces/setting-up-your-project-for-codespaces/configuring-codespaces-for-your-project) to define the Codespaces configuration for your **Python** project. For other project languages, click the language button to the right.\n  "]))),prerequisites:(0,Rn.C)(Ne||(Ne=(0,On.Z)(['\n    - You should have an existing Python project in a repository on GitHub.com. If you don\'t have a project, you can try this tutorial with the following example: https://github.com/2percentsilk/python-quickstart.\n    - Codespaces must be enabled for your organization. For more information, see "[Enabling Codespaces for your organization](/codespaces/managing-codespaces-for-your-organization/enabling-codespaces-for-your-organization)."\n  ']))),contentBlocks:[{codeBlock:{id:"0"},type:"default",title:"Step 1: Open your project in a codespace",content:(0,Rn.C)(Pe||(Pe=(0,On.Z)(['\n        1. Under the repository name, use the **Code** drop-down menu, and in the **Codespaces** tab, click **New codespace**.\n\n            ![New codespace button](/assets/images/help/codespaces/new-codespace-button.png)\n\n            If you don\u2019t see this option, Codespaces isn\'t available for your project. See [Access to Codespaces](/codespaces/developing-in-codespaces/creating-a-codespace#access-to-codespaces) for more information.\n\n        When you create a codespace, your project is created on a remote VM that is dedicated to you. By default, the container for your codespace has many languages and runtimes including Python, pip, and Miniconda. It also includes a common set of tools like git, wget, rsync, openssh, and nano.\n\n        You can customize your codespace by adjusting the amount of vCPUs and RAM, [adding dotfiles to personalize your environment](/codespaces/setting-up-your-codespace/personalizing-codespaces-for-your-account), or by modifying the tools and scripts installed.\n\n        Codespaces uses a file called `devcontainer.json` to store configurations. On launch Codespaces uses the file to install any tools, dependencies, or other set up that might be needed for the project. For more information, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)."\n      '],['\n        1. Under the repository name, use the **Code** drop-down menu, and in the **Codespaces** tab, click **New codespace**.\n\n            ![New codespace button](/assets/images/help/codespaces/new-codespace-button.png)\n\n            If you don\u2019t see this option, Codespaces isn\'t available for your project. See [Access to Codespaces](/codespaces/developing-in-codespaces/creating-a-codespace#access-to-codespaces) for more information.\n\n        When you create a codespace, your project is created on a remote VM that is dedicated to you. By default, the container for your codespace has many languages and runtimes including Python, pip, and Miniconda. It also includes a common set of tools like git, wget, rsync, openssh, and nano.\n\n        You can customize your codespace by adjusting the amount of vCPUs and RAM, [adding dotfiles to personalize your environment](/codespaces/setting-up-your-codespace/personalizing-codespaces-for-your-account), or by modifying the tools and scripts installed.\n\n        Codespaces uses a file called \\`devcontainer.json\\` to store configurations. On launch Codespaces uses the file to install any tools, dependencies, or other set up that might be needed for the project. For more information, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)."\n      '])))},{codeBlock:{id:"0"},type:"default",title:"Step 2: Add a dev container to your codespace from a template",content:(0,Rn.C)(Te||(Te=(0,On.Z)(['\n        The default codespaces container comes with the latest Python version, package managers (pip, Miniconda), and other common tools preinstalled. However, we recommend that you set up a custom container to define the tools and scripts that your project needs. This will ensure a fully reproducible environment for all Codespaces users in your repository.\n\n        To set up your project with a custom container, you will need to use a `devcontainer.json` file to define the environment. In Codespaces you can add this either from a template or you can create your own. For more information on dev containers, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)".\n\n        1. Access the Command Palette (`Shift + Command + P` / `Ctrl + Shift + P`), then start typing "dev container". Select **Codespaces: Add Development Container Configuration Files...**.\n          !["Codespaces: Add Development Container Configuration Files..." in the command palette](/assets/images/help/codespaces/add-prebuilt-container-command.png)\n        2. For this example, click **Python 3**. If you need additional features you can select any container that\u2019s specific to Python or a combination of tools such as Python 3 and PostgreSQL.\n          ![Select Python option from the list](/assets/images/help/codespaces/add-python-prebuilt-container.png)\n        3. Click the recommended version of Python.\n          ![Python version selection](/assets/images/help/codespaces/add-python-version.png)\n        4. Accept the default option to add Node.js to your customization.\n          ![Add Node.js selection](/assets/images/help/codespaces/add-nodejs-selection.png)\n        5. Select any additional features to install and click **OK**.\n        6. Access the command palette (`Shift + Command + P`/ `Ctrl + Shift + P`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n      '],['\n        The default codespaces container comes with the latest Python version, package managers (pip, Miniconda), and other common tools preinstalled. However, we recommend that you set up a custom container to define the tools and scripts that your project needs. This will ensure a fully reproducible environment for all Codespaces users in your repository.\n\n        To set up your project with a custom container, you will need to use a \\`devcontainer.json\\` file to define the environment. In Codespaces you can add this either from a template or you can create your own. For more information on dev containers, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)".\n\n        1. Access the Command Palette (\\`Shift + Command + P\\` / \\`Ctrl + Shift + P\\`), then start typing "dev container". Select **Codespaces: Add Development Container Configuration Files...**.\n          !["Codespaces: Add Development Container Configuration Files..." in the command palette](/assets/images/help/codespaces/add-prebuilt-container-command.png)\n        2. For this example, click **Python 3**. If you need additional features you can select any container that\u2019s specific to Python or a combination of tools such as Python 3 and PostgreSQL.\n          ![Select Python option from the list](/assets/images/help/codespaces/add-python-prebuilt-container.png)\n        3. Click the recommended version of Python.\n          ![Python version selection](/assets/images/help/codespaces/add-python-version.png)\n        4. Accept the default option to add Node.js to your customization.\n          ![Add Node.js selection](/assets/images/help/codespaces/add-nodejs-selection.png)\n        5. Select any additional features to install and click **OK**.\n        6. Access the command palette (\\`Shift + Command + P\\`/ \\`Ctrl + Shift + P\\`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n      '])))},{codeBlock:{id:"0"},type:"sub-section",title:"Anatomy of your dev container",content:(0,Rn.C)(Ie||(Ie=(0,On.Z)(["\n        Adding the Python dev container template adds a .devcontainer folder to the root of your project's repository with the following files:\n\n        - `devcontainer.json`\n        - Dockerfile\n\n        The newly added `devcontainer.json` file defines a few properties that are described below.\n      "],["\n        Adding the Python dev container template adds a .devcontainer folder to the root of your project's repository with the following files:\n\n        - \\`devcontainer.json\\`\n        - Dockerfile\n\n        The newly added \\`devcontainer.json\\` file defines a few properties that are described below.\n      "])))},{type:"sub-section-2",codeBlock:{id:"0",highlight:2},content:(0,Rn.C)(Ae||(Ae=(0,On.Z)(["\n        **`name`** - You can name your dev container anything, this is just the default.\n      "],["\n        **\\`name\\`** - You can name your dev container anything, this is just the default.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:[3,12]},content:(0,Rn.C)(Se||(Se=(0,On.Z)(["\n        **`build`** - The build properties.\n          - **`dockerfile`** - In the build object, dockerfile is a reference to the Dockerfile that was also added from the template.\n          - **`args`**\n            - **`VARIANT`**: This is the node variant we want to use that is passed into the Dockerfile.\n      "],["\n        **\\`build\\`** - The build properties.\n          - **\\`dockerfile\\`** - In the build object, dockerfile is a reference to the Dockerfile that was also added from the template.\n          - **\\`args\\`**\n            - **\\`VARIANT\\`**: This is the node variant we want to use that is passed into the Dockerfile.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:[16,30]},content:(0,Rn.C)(Oe||(Oe=(0,On.Z)(["\n        **`settings`** - These are Visual Studio Code settings that you can set.\n          - **`terminal.integrated.shell.linux`** - While bash is the default here, you could use other terminal shells by modifying this.\n      "],["\n        **\\`settings\\`** - These are Visual Studio Code settings that you can set.\n          - **\\`terminal.integrated.shell.linux\\`** - While bash is the default here, you could use other terminal shells by modifying this.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:[33,35]},content:(0,Rn.C)(Re||(Re=(0,On.Z)(["\n        **`extensions`** - These are extensions included by default.\n          - **`ms-python.python`** - The Microsoft Python extension provides rich support for the Python language (for all actively supported versions of the language: >=3.6), including features such as IntelliSense, linting, debugging, code navigation, code formatting, refactoring, variable explorer, test explorer, and more.\n      "],["\n        **\\`extensions\\`** - These are extensions included by default.\n          - **\\`ms-python.python\\`** - The Microsoft Python extension provides rich support for the Python language (for all actively supported versions of the language: >=3.6), including features such as IntelliSense, linting, debugging, code navigation, code formatting, refactoring, variable explorer, test explorer, and more.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:38},content:(0,Rn.C)(Ee||(Ee=(0,On.Z)(["\n        **`forwardPorts`** - Any ports listed here will be forwarded automatically.\n      "],["\n        **\\`forwardPorts\\`** - Any ports listed here will be forwarded automatically.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:41},content:(0,Rn.C)(De||(De=(0,On.Z)(["\n        **`postCreateCommand`** - If you want to run anything after you land in your codespace that\u2019s not defined in the Dockerfile, like pip3 install -r requirements, you can do that here.\n      "],["\n        **\\`postCreateCommand\\`** - If you want to run anything after you land in your codespace that\u2019s not defined in the Dockerfile, like pip3 install -r requirements, you can do that here.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:44},content:(0,Rn.C)(Ue||(Ue=(0,On.Z)(["\n        **`remoteUser`** - By default, you\u2019re running as the vscode user, but you can optionally set this to root.\n      "],["\n        **\\`remoteUser\\`** - By default, you\u2019re running as the vscode user, but you can optionally set this to root.\n      "])))},{codeBlock:{id:"1"},type:"sub-section",title:"Dockerfile",content:(0,Rn.C)(Fe||(Fe=(0,On.Z)(["\n        You can use the Dockerfile to add additional container layers to specify OS packages, node versions, or global packages we want included in our Dockerfile.\n      "])))},{codeBlock:{id:"0",highlight:[32,41]},type:"default",title:"Step 3: Modify your devcontainer.json file",content:(0,Rn.C)(_e||(_e=(0,On.Z)(['\n        With your dev container added and a basic understanding of what everything does, you can now make changes to configure it for your environment. In this example, you\'ll add properties to install extensions and your project dependencies when your codespace launches.\n\n        1. In the Explorer, expand the `.devcontainer` folder and select the `devcontainer.json` file from the tree to open it.\n\n           ![devcontainer.json file in the Explorer](/assets/images/help/codespaces/devcontainers-options.png)\n\n        2. Update the extensions list in your `devcontainer.json` file to add a few extensions that are useful when working with your project.\n\n           ```json{:copy}\n           "extensions": [\n               "ms-python.python",\n               "cstrap.flask-snippets",\n               "streetsidesoftware.code-spell-checker",\n             ],\n           ```\n\n        3. Uncomment the `postCreateCommand` to auto-install requirements as part of the codespaces setup process.\n\n           ```json{:copy}\n           // Use \'postCreateCommand\' to run commands after the container is created.\n           "postCreateCommand": "pip3 install --user -r requirements.txt",\n           ```\n\n        4. Access the command palette (`Shift + Command + P`/ `Ctrl + Shift + P`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          \n            ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n          \n             Rebuilding inside your codespace ensures your changes work as expected before you commit the changes to the repository. If something does result in a failure, you\u2019ll be placed in a codespace with a recovery container that you can rebuild from to keep adjusting your container.\n\n        5. Check your changes were successfully applied by verifying the Code Spell Checker and Flask Snippet extensions were installed.\n\n           ![Extensions list](/assets/images/help/codespaces/python-extensions.png)\n      '],['\n        With your dev container added and a basic understanding of what everything does, you can now make changes to configure it for your environment. In this example, you\'ll add properties to install extensions and your project dependencies when your codespace launches.\n\n        1. In the Explorer, expand the \\`.devcontainer\\` folder and select the \\`devcontainer.json\\` file from the tree to open it.\n\n           ![devcontainer.json file in the Explorer](/assets/images/help/codespaces/devcontainers-options.png)\n\n        2. Update the extensions list in your \\`devcontainer.json\\` file to add a few extensions that are useful when working with your project.\n\n           \\`\\`\\`json{:copy}\n           "extensions": [\n               "ms-python.python",\n               "cstrap.flask-snippets",\n               "streetsidesoftware.code-spell-checker",\n             ],\n           \\`\\`\\`\n\n        3. Uncomment the \\`postCreateCommand\\` to auto-install requirements as part of the codespaces setup process.\n\n           \\`\\`\\`json{:copy}\n           // Use \'postCreateCommand\' to run commands after the container is created.\n           "postCreateCommand": "pip3 install --user -r requirements.txt",\n           \\`\\`\\`\n\n        4. Access the command palette (\\`Shift + Command + P\\`/ \\`Ctrl + Shift + P\\`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          \n            ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n          \n             Rebuilding inside your codespace ensures your changes work as expected before you commit the changes to the repository. If something does result in a failure, you\u2019ll be placed in a codespace with a recovery container that you can rebuild from to keep adjusting your container.\n\n        5. Check your changes were successfully applied by verifying the Code Spell Checker and Flask Snippet extensions were installed.\n\n           ![Extensions list](/assets/images/help/codespaces/python-extensions.png)\n      '])))},{codeBlock:{id:"0"},type:"default",title:"Step 4: Run your application",content:(0,Rn.C)(Ze||(Ze=(0,On.Z)(["\n        In the previous section, you used the `postCreateCommand` to install a set of packages with pip3. With your dependencies now installed, you can run your application.\n\n        1. Run your application by pressing F5 or entering `python -m flask run` in the codespace terminal.\n\n        2. When your project starts, you should see a message in the bottom right corner with a prompt to connect to the port your project uses.\n\n           ![Port forwarding toast](/assets/images/help/codespaces/python-port-forwarding.png)\n      "],["\n        In the previous section, you used the \\`postCreateCommand\\` to install a set of packages with pip3. With your dependencies now installed, you can run your application.\n\n        1. Run your application by pressing F5 or entering \\`python -m flask run\\` in the codespace terminal.\n\n        2. When your project starts, you should see a message in the bottom right corner with a prompt to connect to the port your project uses.\n\n           ![Port forwarding toast](/assets/images/help/codespaces/python-port-forwarding.png)\n      "])))},{codeBlock:{id:"0"},type:"default",title:"Step 5: Commit your changes",content:(0,Rn.C)(Be||(Be=(0,On.Z)(["\n      Once you've made changes to your codespace, either new code or configuration changes, you'll want to commit your changes. Committing changes to your repository ensures that anyone else who creates a codespace from this repository has the same configuration. This also means that any customization you do, such as adding Visual Studio Code extensions, will appear for all users.\n\n      For information, see \"[Using source control in your codespace](/codespaces/developing-in-codespaces/using-source-control-in-your-codespace#committing-your-changes).\"\n      "])))}],codeBlocks:{0:{fileName:".devcontainer/devcontainer.json",language:"json",code:(0,Rn.C)(Ge||(Ge=(0,On.Z)(['\n      {\n        "name": "Python 3",\n        "build": {\n          "dockerfile": "Dockerfile",\n          "context": "..",\n          "args": {\n            // Update \'VARIANT\' to pick a Python version: 3, 3.6, 3.7, 3.8, 3.9\n            "VARIANT": "3",\n            // Options\n            "INSTALL_NODE": "true",\n            "NODE_VERSION": "lts/*"\n          }\n        },\n      \n        // Set *default* container specific settings.json values on container create.\n        "settings": {\n          "terminal.integrated.shell.linux": "/bin/bash",\n          "python.pythonPath": "/usr/local/bin/python",\n          "python.linting.enabled": true,\n          "python.linting.pylintEnabled": true,\n          "python.formatting.autopep8Path": "/usr/local/py-utils/bin/autopep8",\n          "python.formatting.blackPath": "/usr/local/py-utils/bin/black",\n          "python.formatting.yapfPath": "/usr/local/py-utils/bin/yapf",\n          "python.linting.banditPath": "/usr/local/py-utils/bin/bandit",\n          "python.linting.flake8Path": "/usr/local/py-utils/bin/flake8",\n          "python.linting.mypyPath": "/usr/local/py-utils/bin/mypy",\n          "python.linting.pycodestylePath": "/usr/local/py-utils/bin/pycodestyle",\n          "python.linting.pydocstylePath": "/usr/local/py-utils/bin/pydocstyle",\n          "python.linting.pylintPath": "/usr/local/py-utils/bin/pylint"\n        },\n      \n        // Add the IDs of extensions you want installed when the container is created.\n        "extensions": [\n          "ms-python.python",\n        ],\n      \n        // Use \'forwardPorts\' to make a list of ports inside the container available locally.\n        // "forwardPorts": [],\n      \n        // Use \'postCreateCommand\' to run commands after the container is created.\n        // "postCreateCommand": "pip3 install --user -r requirements.txt",\n      \n        // Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.\n        "remoteUser": "vscode"\n      }      \n      '])))},1:{fileName:".devcontainer/Dockerfile",language:"bash",code:(0,Rn.C)(He||(He=(0,On.Z)(['\n      # [Choice] Python version: 3, 3.9, 3.8, 3.7, 3.6\n      ARG VARIANT="3"\n      FROM mcr.microsoft.com/vscode/devcontainers/python:0-${VARIANT}\n      \n      # [Option] Install Node.js\n      ARG INSTALL_NODE="true"\n      ARG NODE_VERSION="lts/*"\n      RUN if [ "${INSTALL_NODE}" = "true" ]; then su vscode -c "umask 0002 && . /usr/local/share/nvm/nvm.sh && nvm install ${NODE_VERSION} 2>&1"; fi\n      \n      # [Optional] If your pip requirements rarely change, uncomment this section to add them to the image.\n      # COPY requirements.txt /tmp/pip-tmp/\n      # RUN pip3 --disable-pip-version-check --no-cache-dir install -r /tmp/pip-tmp/requirements.txt       #    && rm -rf /tmp/pip-tmp\n      \n      # [Optional] Uncomment this section to install additional OS packages.\n      # RUN apt-get update && export DEBIAN_FRONTEND=noninteractive       #     && apt-get -y install --no-install-recommends <your-package-list-here>\n      \n      # [Optional] Uncomment this line to install global node packages.\n      # RUN su vscode -c "source /usr/local/share/nvm/nvm.sh && npm install -g <your-package-here>" 2>&1\n      \n      '],['\n      # [Choice] Python version: 3, 3.9, 3.8, 3.7, 3.6\n      ARG VARIANT="3"\n      FROM mcr.microsoft.com/vscode/devcontainers/python:0-\\${VARIANT}\n      \n      # [Option] Install Node.js\n      ARG INSTALL_NODE="true"\n      ARG NODE_VERSION="lts/*"\n      RUN if [ "\\${INSTALL_NODE}" = "true" ]; then su vscode -c "umask 0002 && . /usr/local/share/nvm/nvm.sh && nvm install \\${NODE_VERSION} 2>&1"; fi\n      \n      # [Optional] If your pip requirements rarely change, uncomment this section to add them to the image.\n      # COPY requirements.txt /tmp/pip-tmp/\n      # RUN pip3 --disable-pip-version-check --no-cache-dir install -r /tmp/pip-tmp/requirements.txt \\\n      #    && rm -rf /tmp/pip-tmp\n      \n      # [Optional] Uncomment this section to install additional OS packages.\n      # RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \\\n      #     && apt-get -y install --no-install-recommends <your-package-list-here>\n      \n      # [Optional] Uncomment this line to install global node packages.\n      # RUN su vscode -c "source /usr/local/share/nvm/nvm.sh && npm install -g <your-package-here>" 2>&1\n      \n      '])))}}},_n={title:"Add a dev container to your project",shortTitle:"C# Codespaces",topics:["Codespaces","Developer","Organization"],type:"tutorial",slug:"/codespaces/setting-up-your-project-for-codespaces/setting-up-your-project-for-codespaces",originalArticle:"/codespaces/setting-up-your-project-for-codespaces/setting-up-your-dotnet-project-for-codespaces",codeLanguageId:"dotnet",intro:(0,Rn.C)(Le||(Le=(0,On.Z)(["\n  This guide shows you how to add a [dev container](/codespaces/setting-up-your-project-for-codespaces/configuring-codespaces-for-your-project) to define the Codespaces configuration for your **C# (.NET)** project. For other project languages, click the language button to the right.\n "]))),prerequisites:(0,Rn.C)(Ve||(Ve=(0,On.Z)(['\n    - You should have an existing C# (.NET) project in a repository on GitHub.com. If you don\'t have a project, you can try this tutorial with the following example: https://github.com/2percentsilk/python-quickstart.\n    - Codespaces must be enabled for your organization. For more information, see "[Enabling Codespaces for your organization](/codespaces/managing-codespaces-for-your-organization/enabling-codespaces-for-your-organization)."\n  ']))),contentBlocks:[{codeBlock:{id:"0"},type:"default",title:"Step 1: Open your project in a codespace",content:(0,Rn.C)(Me||(Me=(0,On.Z)(['\n        1. Under the repository name, use the **Code** drop-down menu, and in the **Codespaces** tab, click **New codespace**.\n\n            ![New codespace button](/assets/images/help/codespaces/new-codespace-button.png)\n\n            If you don\u2019t see this option, Codespaces isn\'t available for your project. See [Access to Codespaces](/codespaces/developing-in-codespaces/creating-a-codespace#access-to-codespaces) for more information.\n\n        When you create a codespace, your project is created on a remote VM that is dedicated to you. By default, the container for your codespace has many languages and runtimes including .NET. It also includes a common set of tools like git, wget, rsync, openssh, and nano.\n\n        You can customize your codespace by adjusting the amount of vCPUs and RAM, [adding dotfiles to personalize your environment](/codespaces/setting-up-your-codespace/personalizing-codespaces-for-your-account), or by modifying the tools and scripts installed.\n\n        Codespaces uses a file called `devcontainer.json` to store configurations. On launch Codespaces uses the file to install any tools, dependencies, or other set up that might be needed for the project. For more information, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)."\n      '],['\n        1. Under the repository name, use the **Code** drop-down menu, and in the **Codespaces** tab, click **New codespace**.\n\n            ![New codespace button](/assets/images/help/codespaces/new-codespace-button.png)\n\n            If you don\u2019t see this option, Codespaces isn\'t available for your project. See [Access to Codespaces](/codespaces/developing-in-codespaces/creating-a-codespace#access-to-codespaces) for more information.\n\n        When you create a codespace, your project is created on a remote VM that is dedicated to you. By default, the container for your codespace has many languages and runtimes including .NET. It also includes a common set of tools like git, wget, rsync, openssh, and nano.\n\n        You can customize your codespace by adjusting the amount of vCPUs and RAM, [adding dotfiles to personalize your environment](/codespaces/setting-up-your-codespace/personalizing-codespaces-for-your-account), or by modifying the tools and scripts installed.\n\n        Codespaces uses a file called \\`devcontainer.json\\` to store configurations. On launch Codespaces uses the file to install any tools, dependencies, or other set up that might be needed for the project. For more information, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)."\n      '])))},{codeBlock:{id:"0"},type:"default",title:"Step 2: Add a dev container to your codespace from a template",content:(0,Rn.C)(Ye||(Ye=(0,On.Z)(['\n       The default codespaces container comes with the latest .NET version and common tools preinstalled. However, we recommend that you set up a custom container to define the tools and scripts that your project needs. This will ensure a fully reproducible environment for all Codespaces users in your repository.\n\n        To set up your project with a custom container, you will need to use a `devcontainer.json` file to define the environment. In Codespaces you can add this either from a template or you can create your own. For more information on dev containers, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)".\n\n        1. Access the Command Palette (`Shift + Command + P` / `Ctrl + Shift + P`), then start typing "dev container". Select **Codespaces: Add Development Container Configuration Files...**.\n          ![Codespaces: Add Development Container Configuration Files... in the command palette](/assets/images/help/codespaces/add-prebuilt-container-command.png)\n        2. For this example, click **C# (.NET)**. If you need additional features you can select any container that\u2019s specific to C# (.NET) or a combination of tools such as C# (.NET) and MS SQL.\n          \n            ![Select C# (.NET) option from the list](/assets/images/help/codespaces/add-dotnet-prebuilt-container.png)\n        3. Click the recommended version of .NET.\n          ![.NET version selection](/assets/images/help/codespaces/add-dotnet-version.png)\n        4. Accept the default option to add Node.js to your customization.\n          ![Add Node.js selection](/assets/images/help/codespaces/dotnet-options.png)\n        5. Select any additional features to install and click **OK**.\n        6. Access the command palette (`Shift + Command + P`/ `Ctrl + Shift + P`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n      '],['\n       The default codespaces container comes with the latest .NET version and common tools preinstalled. However, we recommend that you set up a custom container to define the tools and scripts that your project needs. This will ensure a fully reproducible environment for all Codespaces users in your repository.\n\n        To set up your project with a custom container, you will need to use a \\`devcontainer.json\\` file to define the environment. In Codespaces you can add this either from a template or you can create your own. For more information on dev containers, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)".\n\n        1. Access the Command Palette (\\`Shift + Command + P\\` / \\`Ctrl + Shift + P\\`), then start typing "dev container". Select **Codespaces: Add Development Container Configuration Files...**.\n          ![Codespaces: Add Development Container Configuration Files... in the command palette](/assets/images/help/codespaces/add-prebuilt-container-command.png)\n        2. For this example, click **C# (.NET)**. If you need additional features you can select any container that\u2019s specific to C# (.NET) or a combination of tools such as C# (.NET) and MS SQL.\n          \n            ![Select C# (.NET) option from the list](/assets/images/help/codespaces/add-dotnet-prebuilt-container.png)\n        3. Click the recommended version of .NET.\n          ![.NET version selection](/assets/images/help/codespaces/add-dotnet-version.png)\n        4. Accept the default option to add Node.js to your customization.\n          ![Add Node.js selection](/assets/images/help/codespaces/dotnet-options.png)\n        5. Select any additional features to install and click **OK**.\n        6. Access the command palette (\\`Shift + Command + P\\`/ \\`Ctrl + Shift + P\\`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n      '])))},{codeBlock:{id:"0"},type:"sub-section",title:"Anatomy of your dev container",content:(0,Rn.C)(ze||(ze=(0,On.Z)(["\n      Adding the C# (.NET) dev container template adds a `.devcontainer` folder to the root of your project's repository with the following files:\n\n        - `devcontainer.json`\n        - Dockerfile\n\n        The newly added `devcontainer.json` file defines a few properties that are described below.\n      "],["\n      Adding the C# (.NET) dev container template adds a \\`.devcontainer\\` folder to the root of your project's repository with the following files:\n\n        - \\`devcontainer.json\\`\n        - Dockerfile\n\n        The newly added \\`devcontainer.json\\` file defines a few properties that are described below.\n      "])))},{type:"sub-section-2",codeBlock:{id:"0",highlight:2},content:(0,Rn.C)(We||(We=(0,On.Z)(["\n        **`name`** - You can name your dev container anything, this is just the default.\n      "],["\n        **\\`name\\`** - You can name your dev container anything, this is just the default.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:[3,13]},content:(0,Rn.C)($e||($e=(0,On.Z)(["\n        **`build`** - The build properties.\n          - **`dockerfil`e** - In the build object, dockerfile is a reference to the Dockerfile that was also added from the template.\n          - **`args`**\n            - **`VARIANT`**: This file only contains one build argument, which is the .NET Core version that we want to use.\n      "],["\n        **\\`build\\`** - The build properties.\n          - **\\`dockerfil\\`e** - In the build object, dockerfile is a reference to the Dockerfile that was also added from the template.\n          - **\\`args\\`**\n            - **\\`VARIANT\\`**: This file only contains one build argument, which is the .NET Core version that we want to use.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:[16,18]},content:(0,Rn.C)(qe||(qe=(0,On.Z)(["\n        **`settings`** - These are Visual Studio Code settings that you can set.\n          - **`terminal.integrated.shell.linux`** - While bash is the default here, you could use other terminal shells by modifying this.\n      "],["\n        **\\`settings\\`** - These are Visual Studio Code settings that you can set.\n          - **\\`terminal.integrated.shell.linux\\`** - While bash is the default here, you could use other terminal shells by modifying this.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:[20,23]},content:(0,Rn.C)(Je||(Je=(0,On.Z)(["\n        **`extensions`** - These are extensions included by default.\n          - **`ms-dotnettools.csharp`** - The Microsoft C# extension provides rich support for developing in C#, including features such as IntelliSense, linting, debugging, code navigation, code formatting, refactoring, variable explorer, test explorer, and more.\n      "],["\n        **\\`extensions\\`** - These are extensions included by default.\n          - **\\`ms-dotnettools.csharp\\`** - The Microsoft C# extension provides rich support for developing in C#, including features such as IntelliSense, linting, debugging, code navigation, code formatting, refactoring, variable explorer, test explorer, and more.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:26},content:(0,Rn.C)(Ke||(Ke=(0,On.Z)(["\n        **`forwardPorts`** - Any ports listed here will be forwarded automatically.\n      "],["\n        **\\`forwardPorts\\`** - Any ports listed here will be forwarded automatically.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:29},content:(0,Rn.C)(Xe||(Xe=(0,On.Z)(["\n        **`postCreateCommand`** - If you want to run anything after you land in your codespace that\u2019s not defined in the Dockerfile, like `dotnet restore`, you can do that here.\n      "],["\n        **\\`postCreateCommand\\`** - If you want to run anything after you land in your codespace that\u2019s not defined in the Dockerfile, like \\`dotnet restore\\`, you can do that here.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:32},content:(0,Rn.C)(Qe||(Qe=(0,On.Z)(["\n        **`remoteUser`** - By default, you\u2019re running as the vscode user, but you can optionally set this to root.\n      "],["\n        **\\`remoteUser\\`** - By default, you\u2019re running as the vscode user, but you can optionally set this to root.\n      "])))},{codeBlock:{id:"1"},type:"sub-section",title:"Dockerfile",content:(0,Rn.C)(en||(en=(0,On.Z)(["\n        You can use the Dockerfile to add additional container layers to specify OS packages, node versions, or global packages we want included in our Dockerfile.\n      "])))},{codeBlock:{id:"0",highlight:[21,29]},type:"default",title:"Step 3: Modify your devcontainer.json file",content:(0,Rn.C)(nn||(nn=(0,On.Z)(['\n        With your dev container added and a basic understanding of what everything does, you can now make changes to configure it for your environment. In this example, you\'ll add properties to install extensions and your project dependencies when your codespace launches.\n\n        1. In the Explorer, expand the `.devcontainer` folder and select the `devcontainer.json` file from the tree to open it.\n\n           ![devcontainer.json file in the Explorer](/assets/images/help/codespaces/devcontainers-options.png)\n\n        2. Update your the `extensions` list in your `devcontainer.json` file to add a few extensions that are useful when working with your project.\n\n           ```json{:copy}\n           "extensions": [\n               "ms-dotnettools.csharp",\n               "streetsidesoftware.code-spell-checker",\n             ],\n           ```\n         \n         3. Uncomment the `postCreateCommand` to restore dependencies as part of the codespace setup process.\n         \n            ```json{:copy}\n            // Use \'postCreateCommand\' to run commands after the container is created.\n            "postCreateCommand": "dotnet restore",\n            ```\n\n        4. Access the command palette (`Shift + Command + P`/ `Ctrl + Shift + P`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n          Rebuilding inside your codespace ensures your changes work as expected before you commit the changes to the repository. If something does result in a failure, you\u2019ll be placed in a codespace with a recovery container that you can rebuild from to keep adjusting your container.\n\n        5. Check your changes were successfully applied by verifying the "Code Spell Checker" extension was installed.\n\n            ![Extensions list](/assets/images/help/codespaces/dotnet-extensions.png)\n      '],['\n        With your dev container added and a basic understanding of what everything does, you can now make changes to configure it for your environment. In this example, you\'ll add properties to install extensions and your project dependencies when your codespace launches.\n\n        1. In the Explorer, expand the \\`.devcontainer\\` folder and select the \\`devcontainer.json\\` file from the tree to open it.\n\n           ![devcontainer.json file in the Explorer](/assets/images/help/codespaces/devcontainers-options.png)\n\n        2. Update your the \\`extensions\\` list in your \\`devcontainer.json\\` file to add a few extensions that are useful when working with your project.\n\n           \\`\\`\\`json{:copy}\n           "extensions": [\n               "ms-dotnettools.csharp",\n               "streetsidesoftware.code-spell-checker",\n             ],\n           \\`\\`\\`\n         \n         3. Uncomment the \\`postCreateCommand\\` to restore dependencies as part of the codespace setup process.\n         \n            \\`\\`\\`json{:copy}\n            // Use \'postCreateCommand\' to run commands after the container is created.\n            "postCreateCommand": "dotnet restore",\n            \\`\\`\\`\n\n        4. Access the command palette (\\`Shift + Command + P\\`/ \\`Ctrl + Shift + P\\`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n          Rebuilding inside your codespace ensures your changes work as expected before you commit the changes to the repository. If something does result in a failure, you\u2019ll be placed in a codespace with a recovery container that you can rebuild from to keep adjusting your container.\n\n        5. Check your changes were successfully applied by verifying the "Code Spell Checker" extension was installed.\n\n            ![Extensions list](/assets/images/help/codespaces/dotnet-extensions.png)\n      '])))},{codeBlock:{id:"0"},type:"default",title:"Step 4: Run your application",content:(0,Rn.C)(tn||(tn=(0,On.Z)(["\n      In the previous section, you used the `postCreateCommand` to install a set of packages via the `dotnet restore` command. With our dependencies now installed, we can run our application.\n\n      1. Run your application by pressing `F5` or entering `dotnet watch run` in your terminal.\n\n        2. When your project starts, you should see a message in the bottom right corner with a prompt to connect to the port your project uses.\n\n           ![Port forwarding toast](/assets/images/help/codespaces/python-port-forwarding.png)\n      "],["\n      In the previous section, you used the \\`postCreateCommand\\` to install a set of packages via the \\`dotnet restore\\` command. With our dependencies now installed, we can run our application.\n\n      1. Run your application by pressing \\`F5\\` or entering \\`dotnet watch run\\` in your terminal.\n\n        2. When your project starts, you should see a message in the bottom right corner with a prompt to connect to the port your project uses.\n\n           ![Port forwarding toast](/assets/images/help/codespaces/python-port-forwarding.png)\n      "])))},{codeBlock:{id:"0"},type:"default",title:"Step 5: Commit your changes",content:(0,Rn.C)(on||(on=(0,On.Z)(["\n      Once you've made changes to your codespace, either new code or configuration changes, you'll want to commit your changes. Committing changes to your repository ensures that anyone else who creates a codespace from this repository has the same configuration. This also means that any customization you do, such as adding Visual Studio Code extensions, will appear for all users.\n\n      For information, see \"[Using source control in your codespace](/codespaces/developing-in-codespaces/using-source-control-in-your-codespace#committing-your-changes).\"\n      "])))}],codeBlocks:{0:{fileName:".devcontainer/devcontainer.json",language:"json",code:(0,Rn.C)(sn||(sn=(0,On.Z)(['\n      {\n        "name": "C# (.NET)",\n        "build": {\n          "dockerfile": "Dockerfile",\n          "args": {\n            // Update \'VARIANT\' to pick a .NET Core version: 2.1, 3.1, 5.0\n            "VARIANT": "5.0",\n            // Options\n            "INSTALL_NODE": "true",\n            "NODE_VERSION": "lts/*",\n            "INSTALL_AZURE_CLI": "false"\n          }\n        },\n      \n        // Set *default* container specific settings.json values on container create.\n        "settings": {\n          "terminal.integrated.shell.linux": "/bin/bash"\n        },\n      \n        // Add the IDs of extensions you want installed when the container is created.\n        "extensions": [\n          "ms-dotnettools.csharp"\n        ],\n      \n        // Use \'forwardPorts\' to make a list of ports inside the container available locally.\n        // "forwardPorts": [5000, 5001],\n      \n        // Use \'postCreateCommand\' to run commands after the container is created.\n        // "postCreateCommand": "dotnet restore",\n      \n        // Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.\n        "remoteUser": "vscode"\n      }  \n      '])))},1:{fileName:".devcontainer/Dockerfile",language:"bash",code:(0,Rn.C)(an||(an=(0,On.Z)(['\n      # [Choice] .NET version: 5.0, 3.1, 2.1\n      ARG VARIANT="5.0"\n      FROM mcr.microsoft.com/vscode/devcontainers/dotnetcore:0-${VARIANT}\n      \n      # [Option] Install Node.js\n      ARG INSTALL_NODE="true"\n      ARG NODE_VERSION="lts/*"\n      RUN if [ "${INSTALL_NODE}" = "true" ]; then su vscode -c "umask 0002 && . /usr/local/share/nvm/nvm.sh && nvm install ${NODE_VERSION} 2>&1"; fi\n      \n      # [Option] Install Azure CLI\n      ARG INSTALL_AZURE_CLI="false"\n      COPY library-scripts/azcli-debian.sh /tmp/library-scripts/\n      RUN if [ "$INSTALL_AZURE_CLI" = "true" ]; then bash /tmp/library-scripts/azcli-debian.sh; fi           && apt-get clean -y && rm -rf /var/lib/apt/lists/* /tmp/library-scripts\n      \n      # [Optional] Uncomment this section to install additional OS packages.\n      # RUN apt-get update && export DEBIAN_FRONTEND=noninteractive       #     && apt-get -y install --no-install-recommends <your-package-list-here>\n      \n      # [Optional] Uncomment this line to install global node packages.\n      # RUN su vscode -c "source /usr/local/share/nvm/nvm.sh && npm install -g <your-package-here>" 2>&1\n      '],['\n      # [Choice] .NET version: 5.0, 3.1, 2.1\n      ARG VARIANT="5.0"\n      FROM mcr.microsoft.com/vscode/devcontainers/dotnetcore:0-\\${VARIANT}\n      \n      # [Option] Install Node.js\n      ARG INSTALL_NODE="true"\n      ARG NODE_VERSION="lts/*"\n      RUN if [ "\\${INSTALL_NODE}" = "true" ]; then su vscode -c "umask 0002 && . /usr/local/share/nvm/nvm.sh && nvm install \\${NODE_VERSION} 2>&1"; fi\n      \n      # [Option] Install Azure CLI\n      ARG INSTALL_AZURE_CLI="false"\n      COPY library-scripts/azcli-debian.sh /tmp/library-scripts/\n      RUN if [ "$INSTALL_AZURE_CLI" = "true" ]; then bash /tmp/library-scripts/azcli-debian.sh; fi \\\n          && apt-get clean -y && rm -rf /var/lib/apt/lists/* /tmp/library-scripts\n      \n      # [Optional] Uncomment this section to install additional OS packages.\n      # RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \\\n      #     && apt-get -y install --no-install-recommends <your-package-list-here>\n      \n      # [Optional] Uncomment this line to install global node packages.\n      # RUN su vscode -c "source /usr/local/share/nvm/nvm.sh && npm install -g <your-package-here>" 2>&1\n      '])))}}},Zn={title:"Add a dev container to your project",shortTitle:"Add a dev container to your project",topics:["Codespaces","Developer","Organization","Java"],type:"tutorial",slug:"/codespaces/setting-up-your-project-for-codespaces/setting-up-your-project-for-codespaces",originalArticle:"/codespaces/setting-up-your-project-for-codespaces/setting-up-your-java-project-for-codespaces",codeLanguageId:"java",intro:(0,Rn.C)(rn||(rn=(0,On.Z)(["\n  This guide shows you how to add a [dev container](/codespaces/setting-up-your-project-for-codespaces/configuring-codespaces-for-your-project) to define the Codespaces configuration for your **Java** project. For other project languages, click the language button to the right.\n  "]))),prerequisites:(0,Rn.C)(cn||(cn=(0,On.Z)(['\n  - You should have an existing Java project in a repository on GitHub.com. If you don\'t have a project, you can try this tutorial with the following example: https://github.com/microsoft/vscode-remote-try-java\n  - Codespaces must be enabled for your organization. For more information, see "[Enabling Codespaces for your organization](/codespaces/managing-codespaces-for-your-organization/enabling-codespaces-for-your-organization)."\n  ']))),contentBlocks:[{codeBlock:{id:"0"},type:"default",title:"Step 1: Open your project in a codespace",content:(0,Rn.C)(dn||(dn=(0,On.Z)(['\n        1. Under the repository name, use the **Code** drop-down menu, and in the **Codespaces** tab, click **New codespace**.\n\n            ![New codespace button](/assets/images/help/codespaces/new-codespace-button.png)\n\n           If you don\u2019t see this option, Codespaces isn\'t available for your project. See [Access to Codespaces](/codespaces/developing-in-codespaces/creating-a-codespace#access-to-codespaces) for more information.\n\n        When you create a codespace, your project is created on a remote VM that is dedicated to you. By default, the container for your codespace has many languages and runtimes including Java, nvm, npm, and yarn. It also includes a common set of tools like git, wget, rsync, openssh, and nano.\n        \n        Codespaces uses a file called `devcontainer.json` to store configurations. On launch Codespaces uses the file to install any tools, dependencies, or other set up that might be needed for the project. For more information, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)."\n      '],['\n        1. Under the repository name, use the **Code** drop-down menu, and in the **Codespaces** tab, click **New codespace**.\n\n            ![New codespace button](/assets/images/help/codespaces/new-codespace-button.png)\n\n           If you don\u2019t see this option, Codespaces isn\'t available for your project. See [Access to Codespaces](/codespaces/developing-in-codespaces/creating-a-codespace#access-to-codespaces) for more information.\n\n        When you create a codespace, your project is created on a remote VM that is dedicated to you. By default, the container for your codespace has many languages and runtimes including Java, nvm, npm, and yarn. It also includes a common set of tools like git, wget, rsync, openssh, and nano.\n        \n        Codespaces uses a file called \\`devcontainer.json\\` to store configurations. On launch Codespaces uses the file to install any tools, dependencies, or other set up that might be needed for the project. For more information, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)."\n      '])))},{codeBlock:{id:"0"},type:"default",title:"Step 2: Add a dev container to your codespace from a template",content:(0,Rn.C)(ln||(ln=(0,On.Z)(['\n        The default codespaces container comes with the latest Java version, package managers (Maven, Gradle), and other common tools preinstalled. However, we recommend that you set up a custom container to define the tools and scripts that your project needs. This will ensure a fully reproducible environment for all Codespaces users in your repository.\n\n        To set up your project with a custom container, you will need to use a `devcontainer.json` file to define the environment. In Codespaces you can add this either from a template or you can create your own. For more information on dev containers, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)".\n\n        1. Access the Command Palette (`Shift + Command + P` / `Ctrl + Shift + P`), then start typing "dev container". Select **Codespaces: Add Development Container Configuration Files...**.\n          !["Codespaces: Add Development Container Configuration Files..." in the command palette](/assets/images/help/codespaces/add-prebuilt-container-command.png)\n        2. For this example, click **Java**. In practice, you could select any container that\u2019s specific to Java or a combination of tools such as Java and Azure Functions.\n          ![Select Java option from the list](/assets/images/help/codespaces/add-java-prebuilt-container.png)\n        3. Click the recommended version of Java.\n          ![Java version selection](/assets/images/help/codespaces/add-java-version.png)\n        4. Select any additional features to install and click **OK**.\n        5. Access the command palette (`Shift + Command + P`/ `Ctrl + Shift + P`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n      '],['\n        The default codespaces container comes with the latest Java version, package managers (Maven, Gradle), and other common tools preinstalled. However, we recommend that you set up a custom container to define the tools and scripts that your project needs. This will ensure a fully reproducible environment for all Codespaces users in your repository.\n\n        To set up your project with a custom container, you will need to use a \\`devcontainer.json\\` file to define the environment. In Codespaces you can add this either from a template or you can create your own. For more information on dev containers, see "[Introduction to dev containers](/codespaces/setting-up-your-codespace/configuring-codespaces-for-your-project)".\n\n        1. Access the Command Palette (\\`Shift + Command + P\\` / \\`Ctrl + Shift + P\\`), then start typing "dev container". Select **Codespaces: Add Development Container Configuration Files...**.\n          !["Codespaces: Add Development Container Configuration Files..." in the command palette](/assets/images/help/codespaces/add-prebuilt-container-command.png)\n        2. For this example, click **Java**. In practice, you could select any container that\u2019s specific to Java or a combination of tools such as Java and Azure Functions.\n          ![Select Java option from the list](/assets/images/help/codespaces/add-java-prebuilt-container.png)\n        3. Click the recommended version of Java.\n          ![Java version selection](/assets/images/help/codespaces/add-java-version.png)\n        4. Select any additional features to install and click **OK**.\n        5. Access the command palette (\\`Shift + Command + P\\`/ \\`Ctrl + Shift + P\\`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n      '])))},{codeBlock:{id:"0"},type:"sub-section",title:"Anatomy of your dev container",content:(0,Rn.C)(un||(un=(0,On.Z)(["\n        Adding the Java dev container template adds a .devcontainer folder to the root of your project's repository with the following files:\n\n        - `devcontainer.json`\n        - Dockerfile\n\n        The newly added `devcontainer.json` file defines a few properties that are described below.\n      "],["\n        Adding the Java dev container template adds a .devcontainer folder to the root of your project's repository with the following files:\n\n        - \\`devcontainer.json\\`\n        - Dockerfile\n\n        The newly added \\`devcontainer.json\\` file defines a few properties that are described below.\n      "])))},{type:"sub-section-2",codeBlock:{id:"0",highlight:4},content:(0,Rn.C)(pn||(pn=(0,On.Z)(["\n        **`name`** - You can name your dev container anything, this is just the default.\n      "],["\n        **\\`name\\`** - You can name your dev container anything, this is just the default.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:[5,16]},content:(0,Rn.C)(hn||(hn=(0,On.Z)(["\n        **`build`** - The build properties.\n          - **`dockerfile`** - In the build object, dockerfile is a reference to the Dockerfile that was also added from the template.\n          - **`args`**\n            - **`VARIANT`**: This file only contains one build argument, which is the Java version that is passed into the Dockerfile.\n      "],["\n        **\\`build\\`** - The build properties.\n          - **\\`dockerfile\\`** - In the build object, dockerfile is a reference to the Dockerfile that was also added from the template.\n          - **\\`args\\`**\n            - **\\`VARIANT\\`**: This file only contains one build argument, which is the Java version that is passed into the Dockerfile.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:[19,23]},content:(0,Rn.C)(mn||(mn=(0,On.Z)(["\n        **`settings`** - These are Visual Studio Code settings that you can set.\n          - **`terminal.integrated.shell.linux`** - While bash is the default here, you could use other terminal shells by modifying this.\n      "],["\n        **\\`settings\\`** - These are Visual Studio Code settings that you can set.\n          - **\\`terminal.integrated.shell.linux\\`** - While bash is the default here, you could use other terminal shells by modifying this.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:[26,28]},content:(0,Rn.C)(yn||(yn=(0,On.Z)(["\n        **`extensions`** - These are extensions included by default.\n          - **`vscjava.vscode-java-pack`** - The Java Extension Pack provides popular extensions for Java development to get you started.\n      "],["\n        **\\`extensions\\`** - These are extensions included by default.\n          - **\\`vscjava.vscode-java-pack\\`** - The Java Extension Pack provides popular extensions for Java development to get you started.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:31},content:(0,Rn.C)(fn||(fn=(0,On.Z)(["\n        **`forwardPorts`** - Any ports listed here will be forwarded automatically.\n      "],["\n        **\\`forwardPorts\\`** - Any ports listed here will be forwarded automatically.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:34},content:(0,Rn.C)(gn||(gn=(0,On.Z)(["\n        **`postCreateCommand`** - If you want to run anything after you land in your codespace that\u2019s not defined in the Dockerfile, you can do that here.\n      "],["\n        **\\`postCreateCommand\\`** - If you want to run anything after you land in your codespace that\u2019s not defined in the Dockerfile, you can do that here.\n      "])))},{type:"sub-section",codeBlock:{id:"0",highlight:37},content:(0,Rn.C)(bn||(bn=(0,On.Z)(["\n        **`remoteUser`** - By default, you\u2019re running as the vscode user, but you can optionally set this to root.\n      "],["\n        **\\`remoteUser\\`** - By default, you\u2019re running as the vscode user, but you can optionally set this to root.\n      "])))},{codeBlock:{id:"1"},type:"sub-section",title:"Dockerfile",content:(0,Rn.C)(vn||(vn=(0,On.Z)(["\n        You can use the Dockerfile to add additional container layers to specify OS packages, node versions, or global packages we want included in our Dockerfile.\n      "])))},{codeBlock:{id:"0",highlight:[30,34]},type:"default",title:"Step 3: Modify your devcontainer.json file",content:(0,Rn.C)(wn||(wn=(0,On.Z)(['\n        With your dev container added and a basic understanding of what everything does, you can now make changes to configure it for your environment. In this example, you\'ll add properties to install extensions and your project dependencies when your codespace launches.\n\n        1. In the Explorer, expand the `.devcontainer` folder and select the `devcontainer.json` file from the tree to open it.\n\n           ![devcontainer.json file in the Explorer](/assets/images/help/codespaces/devcontainers-options.png)\n\n        2. Add the following lines to your `devcontainer.json` file after `extensions`.\n\n           ```json{:copy}\n           "postCreateCommand": "java -version",\n           "forwardPorts": [4000],\n           ```\n         \n           For more information on `devcontainer.json` properties, see the [devcontainer.json reference](https://code.visualstudio.com/docs/remote/devcontainerjson-reference) on the Visual Studio Code docs.\n\n        4. Access the command palette (`Shift + Command + P`/ `Ctrl + Shift + P`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n          Rebuilding inside your codespace ensures your changes work as expected before you commit the changes to the repository. If something does result in a failure, you\u2019ll be placed in a codespace with a recovery container that you can rebuild from to keep adjusting your container.\n      '],['\n        With your dev container added and a basic understanding of what everything does, you can now make changes to configure it for your environment. In this example, you\'ll add properties to install extensions and your project dependencies when your codespace launches.\n\n        1. In the Explorer, expand the \\`.devcontainer\\` folder and select the \\`devcontainer.json\\` file from the tree to open it.\n\n           ![devcontainer.json file in the Explorer](/assets/images/help/codespaces/devcontainers-options.png)\n\n        2. Add the following lines to your \\`devcontainer.json\\` file after \\`extensions\\`.\n\n           \\`\\`\\`json{:copy}\n           "postCreateCommand": "java -version",\n           "forwardPorts": [4000],\n           \\`\\`\\`\n         \n           For more information on \\`devcontainer.json\\` properties, see the [devcontainer.json reference](https://code.visualstudio.com/docs/remote/devcontainerjson-reference) on the Visual Studio Code docs.\n\n        4. Access the command palette (\\`Shift + Command + P\\`/ \\`Ctrl + Shift + P\\`), then start typing "rebuild". Select **Codespaces: Rebuild Container**. \n          ![Rebuild container option](/assets/images/help/codespaces/codespaces-rebuild.png)\n          Rebuilding inside your codespace ensures your changes work as expected before you commit the changes to the repository. If something does result in a failure, you\u2019ll be placed in a codespace with a recovery container that you can rebuild from to keep adjusting your container.\n      '])))},{codeBlock:{id:"0"},type:"default",title:"Step 4: Run your application",content:(0,Rn.C)(kn||(kn=(0,On.Z)(["\n      In the previous section, you used the `postCreateCommand` to install a set of packages via npm. You can now use this to run our application with npm.\n\n      1. Run your application by pressing `F5`.\n      \n      2. When your project starts, you should see a message in the bottom right corner with a prompt to connect to the port your project uses.\n        ![Port forwarding toast](/assets/images/help/codespaces/codespaces-port-toast.png)\n      "],["\n      In the previous section, you used the \\`postCreateCommand\\` to install a set of packages via npm. You can now use this to run our application with npm.\n\n      1. Run your application by pressing \\`F5\\`.\n      \n      2. When your project starts, you should see a message in the bottom right corner with a prompt to connect to the port your project uses.\n        ![Port forwarding toast](/assets/images/help/codespaces/codespaces-port-toast.png)\n      "])))},{codeBlock:{id:"0"},type:"default",title:"Step 5: Commit your changes",content:(0,Rn.C)(jn||(jn=(0,On.Z)(["\n      Once you've made changes to your codespace, either new code or configuration changes, you'll want to commit your changes. Committing changes to your repository ensures that anyone else who creates a codespace from this repository has the same configuration. This also means that any customization you do, such as adding Visual Studio Code extensions, will appear for all users.\n\n      For information, see \"[Using source control in your codespace](/codespaces/developing-in-codespaces/using-source-control-in-your-codespace#committing-your-changes).\"\n      "])))}],codeBlocks:{0:{fileName:".devcontainer/devcontainer.json",language:"json",code:(0,Rn.C)(xn||(xn=(0,On.Z)(['\n      // For format details, see https://aka.ms/vscode-remote/devcontainer.json or this file\'s README at:\n      // https://github.com/microsoft/vscode-dev-containers/tree/v0.159.0/containers/java\n      {\n        "name": "Java",\n        "build": {\n          "dockerfile": "Dockerfile",\n          "args": {\n            // Update the VARIANT arg to pick a Java version: 11, 14\n            "VARIANT": "11",\n            // Options\n            "INSTALL_MAVEN": "true",\n            "INSTALL_GRADLE": "false",\n            "INSTALL_NODE": "false",\n            "NODE_VERSION": "lts/*"\n          }\n        },\n      \n        // Set *default* container specific settings.json values on container create.\n        "settings": {\n          "terminal.integrated.shell.linux": "/bin/bash",\n          "java.home": "/docker-java-home",\n          "maven.executable.path": "/usr/local/sdkman/candidates/maven/current/bin/mvn"\n        },\n      \n        // Add the IDs of extensions you want installed when the container is created.\n        "extensions": [\n          "vscjava.vscode-java-pack"\n        ],\n      \n        // Use \'forwardPorts\' to make a list of ports inside the container available locally.\n        // "forwardPorts": [],\n      \n        // Use \'postCreateCommand\' to run commands after the container is created.\n        // "postCreateCommand": "java -version",\n      \n        // Uncomment to connect as a non-root user. See https://aka.ms/vscode-remote/containers/non-root.\n        "remoteUser": "vscode"\n      }    \n      '])))},1:{fileName:".devcontainer/Dockerfile",language:"bash",code:(0,Rn.C)(Cn||(Cn=(0,On.Z)(['\n      # See here for image contents: https://github.com/microsoft/vscode-dev-containers/tree/v0.159.0/containers/java/.devcontainer/base.Dockerfile\n      ARG VARIANT="14"\n      FROM mcr.microsoft.com/vscode/devcontainers/java:0-${VARIANT}\n      \n      # [Optional] Install Maven or Gradle\n      ARG INSTALL_MAVEN="false"\n      ARG MAVEN_VERSION=3.6.3\n      ARG INSTALL_GRADLE="false"\n      ARG GRADLE_VERSION=5.4.1\n      RUN if [ "${INSTALL_MAVEN}" = "true" ]; then su vscode -c "source /usr/local/sdkman/bin/sdkman-init.sh && sdk install maven "${MAVEN_VERSION}""; fi           && if [ "${INSTALL_GRADLE}" = "true" ]; then su vscode -c "source /usr/local/sdkman/bin/sdkman-init.sh && sdk install gradle "${GRADLE_VERSION}""; fi\n      \n      # [Optional] Install a version of Node.js using nvm for front end dev\n      ARG INSTALL_NODE="true"\n      ARG NODE_VERSION="lts/*"\n      RUN if [ "${INSTALL_NODE}" = "true" ]; then su vscode -c "source /usr/local/share/nvm/nvm.sh && nvm install ${NODE_VERSION} 2>&1"; fi\n      \n      # [Optional] Uncomment this section to install additional OS packages.\n      # RUN apt-get update && export DEBIAN_FRONTEND=noninteractive       #     && apt-get -y install --no-install-recommends <your-package-list-here>\n      \n      # [Optional] Uncomment this line to install global node packages.\n      # RUN su vscode -c "source /usr/local/share/nvm/nvm.sh && npm install -g <your-package-here>" 2>&1\n      '],['\n      # See here for image contents: https://github.com/microsoft/vscode-dev-containers/tree/v0.159.0/containers/java/.devcontainer/base.Dockerfile\n      ARG VARIANT="14"\n      FROM mcr.microsoft.com/vscode/devcontainers/java:0-\\${VARIANT}\n      \n      # [Optional] Install Maven or Gradle\n      ARG INSTALL_MAVEN="false"\n      ARG MAVEN_VERSION=3.6.3\n      ARG INSTALL_GRADLE="false"\n      ARG GRADLE_VERSION=5.4.1\n      RUN if [ "\\${INSTALL_MAVEN}" = "true" ]; then su vscode -c "source /usr/local/sdkman/bin/sdkman-init.sh && sdk install maven \\"\\${MAVEN_VERSION}\\""; fi \\\n          && if [ "\\${INSTALL_GRADLE}" = "true" ]; then su vscode -c "source /usr/local/sdkman/bin/sdkman-init.sh && sdk install gradle \\"\\${GRADLE_VERSION}\\""; fi\n      \n      # [Optional] Install a version of Node.js using nvm for front end dev\n      ARG INSTALL_NODE="true"\n      ARG NODE_VERSION="lts/*"\n      RUN if [ "\\${INSTALL_NODE}" = "true" ]; then su vscode -c "source /usr/local/share/nvm/nvm.sh && nvm install \\${NODE_VERSION} 2>&1"; fi\n      \n      # [Optional] Uncomment this section to install additional OS packages.\n      # RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \\\n      #     && apt-get -y install --no-install-recommends <your-package-list-here>\n      \n      # [Optional] Uncomment this line to install global node packages.\n      # RUN su vscode -c "source /usr/local/share/nvm/nvm.sh && npm install -g <your-package-here>" 2>&1\n      '])))}}},Bn=t(85893),Gn=[En,Dn,Un,Fn,Zn,_n],Hn=[{id:"nodejs",label:"Node.js"},{id:"py",label:"Python"},{id:"dotnet",label:"C#"},{id:"java",label:"Java"}],Ln=(0,An.createContext)(null),Vn=function(){var e=(0,An.useContext)(Ln);if(!e)throw new Error('"usePlaygroundContext" may only be used inside "PlaygroundContext.Provider"');return e},Mn=function(e){var n=(0,Sn.useRouter)(),t=(0,An.useState)(0),o=t[0],s=t[1],a=(0,An.useState)(),i=a[0],r=a[1],c=n.asPath.split("?")[0],d=Gn.filter((function(e){return e.slug===c})),l=n.query.langId,u=d.map((function(e){return e.codeLanguageId})),p=Hn.find((function(e){return e.id===l}))||Hn.find((function(e){return e.id===u[0]})),h=d.find((function(e){return e.codeLanguageId===(null===p||void 0===p?void 0:p.id)})),m={activeSectionIndex:o,setActiveSectionIndex:s,scrollToSection:i,setScrollToSection:r,currentLanguage:p,codeLanguages:Hn.filter((function(e){var n=e.id;return u.includes(n)})),article:h};return(0,Bn.jsx)(Ln.Provider,{value:m,children:e.children})},Yn=t(94184),zn=t.n(Yn),Wn=t(1252),$n=function(e){return e.toLowerCase().replace(/\s/g,"-")},qn=t(92809),Jn=t(10219),Kn=t(81587),Xn=t(94444),Qn=t(58800),et=t(84283),nt=t(48216),tt=t(775),ot=t(73980),st=t.n(ot),at=["node","inline","className","children"];function it(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function rt(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?it(Object(t),!0).forEach((function(n){(0,qn.Z)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):it(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var ct=function(e){var n=e.className,t=e.children,o=(0,Kn.Fg)();return(0,Bn.jsx)(tt.S,{children:(0,Bn.jsx)(Xn.D,{className:zn()(st().articleMarkdown,n),remarkPlugins:[nt.Z],components:{code:function(e){e.node;var n=e.inline,t=e.className,s=e.children,a=(0,Jn.Z)(e,at),i=/language-(\w+)/.exec(t||"");return!n&&i?(0,Bn.jsx)(Qn.Z,rt({style:"dark"===o.colorScheme?et.YC:et.vs,language:i[1],PreTag:"div",children:String(s).replace(/\n$/,"")},a)):(0,Bn.jsx)("code",rt(rt({className:t},a),{},{children:s}))}},children:t})})},dt=function(e){var n=e.sectionIndex,t=e.contentBlock,o=Vn(),s=o.activeSectionIndex,a=o.setActiveSectionIndex,i=o.scrollToSection,r=o.setScrollToSection,c=(0,An.useRef)(null),d=(0,Wn.R)(c,{threshold:0,rootMargin:"-25% 0px -75% 0px"});(0,An.useEffect)((function(){d&&a(n)}),[d]),(0,An.useEffect)((function(){var e;i===n&&(null===(e=c.current)||void 0===e||e.scrollIntoView({block:"start",inline:"nearest",behavior:"smooth"}),r())}),[i]);var l=n===s,u=$n(t.title||""),p=!l&&s-1!==n;return(0,Bn.jsxs)("div",{className:zn()("root p-4",l?"color-bg-default color-shadow-medium rounded-2 color-border-accent-emphasis":"",p&&"border-bottom"),style:{minHeight:t.title?"25.1vh":"unset",border:"1px solid transparent"},ref:c,id:u,children:[t.title&&(0,Bn.jsx)("h3",{className:zn()("anchor mb-4","default"===t.type&&"h3","sub-section"===t.type&&"h4"),children:(0,Bn.jsx)("a",{className:"d-flex color-fg-default",href:"#".concat(u),children:t.title})}),(0,Bn.jsx)(ct,{className:"markdown-body playground",children:t.content})]})},lt=function(){var e=Vn().article;return e?(0,Bn.jsxs)("div",{children:[(0,Bn.jsxs)("div",{className:"border-bottom py-5",children:[(0,Bn.jsx)("h1",{children:e.title}),(0,Bn.jsx)("h2",{className:"h3 my-3 text-normal text-gray border-bottom-0",children:(0,Bn.jsx)(ct,{className:"markdown-body",children:e.intro})}),e.prerequisites&&(0,Bn.jsxs)("div",{className:"mt-4 d-flex",children:[(0,Bn.jsx)("div",{className:"pr-3 mt-1",children:(0,Bn.jsx)(ut,{className:"color-bg-accent-emphasis",children:(0,Bn.jsx)(Tn.CheckIcon,{className:"",size:15})})}),(0,Bn.jsxs)("div",{className:"",children:[(0,Bn.jsx)("h3",{children:"Prerequisites"}),(0,Bn.jsx)(ct,{className:"markdown-body playground",children:e.prerequisites})]})]}),(0,Bn.jsxs)("div",{className:"mt-4 d-flex",children:[(0,Bn.jsx)("div",{className:"pr-3 mt-1",children:(0,Bn.jsx)(ut,{className:"color-bg-accent-emphasis",children:(0,Bn.jsx)(Tn.SearchIcon,{className:"",size:15})})}),(0,Bn.jsxs)("div",{children:[(0,Bn.jsx)("h3",{children:"In this Article"}),(0,Bn.jsx)("ul",{className:"list-style-none ml-3 mt-2",children:e.contentBlocks.map((function(e){if(!e.title||"sub-section-2"===e.type)return null;var n=$n(e.title);return"sub-section"===e.type?(0,Bn.jsx)("li",{className:"pointer ml-4 my-1",children:(0,Bn.jsx)("a",{href:"#".concat(n),children:e.title})},n):(0,Bn.jsx)("li",{className:"pointer text-bold text-blue my-2",children:(0,Bn.jsx)("a",{href:"#".concat(n),children:e.title})},n)}))})]})]})]}),e.contentBlocks.map((function(e,n){return(0,Bn.jsx)(dt,{contentBlock:e,sectionIndex:n},"section-".concat(n))})),(0,Bn.jsx)("div",{style:{minHeight:"75vh"}})]}):null},ut=function(e){var n=e.className,t=e.children;return(0,Bn.jsx)("div",{className:zn()("circle d-flex flex-justify-center flex-items-center",n),style:{width:24,height:24},children:t})},pt=t(42171),ht=t(87654);function mt(){return(0,Bn.jsxs)(pt.Z,{display:"flex",flexDirection:"column",alignItems:"center",py:4,children:[(0,Bn.jsx)("img",{width:"120px",src:"/assets/images/playground/loading.gif",alt:"bouncing octocat"}),(0,Bn.jsx)(ht.Z,{fontFamily:"mono",fontSize:1,color:"gray.8",children:"Loading..."})]})}var yt=t(66311),ft=t(34776),gt=t(30266);var bt=function(e){var n=function(e,n){var t=(0,An.useState)(!1),o=t[0],s=t[1],a=n&&n.successDuration;return(0,An.useEffect)((function(){if(o&&a){var e=setTimeout((function(){s(!1)}),a);return function(){clearTimeout(e)}}}),[o,a]),[o,(0,gt.Z)(Pn().mark((function n(){return Pn().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,navigator.clipboard.writeText(e);case 3:s(!0),n.next=9;break;case 6:n.prev=6,n.t0=n.catch(0),s(!1);case 9:case"end":return n.stop()}}),n,null,[[0,6]])})))]}(e.code,{successDuration:1400}),t=(0,yt.Z)(n,2),o=t[0],s=t[1];return(0,Bn.jsxs)("div",{className:"d-flex flex-justify-between flex-items-center color-bg-default border-left border-top border-right px-3 py-1",children:[(0,Bn.jsx)("div",{}),(0,Bn.jsx)("div",{className:"d-flex",children:(0,Bn.jsx)(ft.Z,{align:"right",direction:"nw","aria-label":o?"Copied!":"Copy to clipboard",children:(0,Bn.jsx)("button",{className:"btn-octicon",onClick:function(){return s()},children:o?(0,Bn.jsx)(Tn.CheckIcon,{}):(0,Bn.jsx)(Tn.CopyIcon,{})})})})]})};function vt(e,n){var t="undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=function(e,n){if(!e)return;if("string"===typeof e)return wt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return wt(e,n)}(e))||n&&e&&"number"===typeof e.length){t&&(e=t);var o=0,s=function(){};return{s:s,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,r=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return i=e.done,e},e:function(e){r=!0,a=e},f:function(){try{i||null==t.return||t.return()}finally{if(r)throw a}}}}function wt(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,o=new Array(n);t<n;t++)o[t]=e[t];return o}var kt=function(e){var n,t,o=e.article,s=(0,Kn.Fg)(),a=(0,An.useState)(!1),i=a[0],r=a[1],c=(0,An.useState)(0),d=c[0],l=c[1],u=Vn().activeSectionIndex,p="number"===typeof(t=(null===(n=o.contentBlocks[u])||void 0===n?void 0:n.codeBlock.highlight)||[])?[[t,t]]:"number"===typeof t[0]?[t]:t;(0,An.useEffect)((function(){var e=setTimeout((function(){r(!0)}),250);return function(){clearTimeout(e)}}),[]),(0,An.useEffect)((function(){0!==d&&l(0)}),[u]);var h=o.contentBlocks[u].codeBlock.id,m=o.codeBlocks[h];Array.isArray(m)||(m=[m]);var y=m[d];return y||(y=m[0]),(0,Bn.jsx)("div",{className:"mx-auto",children:(0,Bn.jsxs)("div",{className:"text-mono",children:[(0,Bn.jsx)(bt,{code:y.code}),(0,Bn.jsx)("div",{className:"d-flex flex-items-center px-3 border-left border-right",children:m.map((function(e,n){return(0,Bn.jsx)("button",{className:zn()("btn-link Link--secondary no-underline mr-2 f6 py-2 px-3",{"color-bg-subtle":n===d}),onClick:function(){return l(n)},children:e.fileName})}))}),(0,Bn.jsx)("div",{className:"border",children:i?(0,Bn.jsx)(Qn.Z,{style:"night"===s.resolvedColorMode?et.YC:et.vs,language:y.language,PreTag:"div",customStyle:{margin:"0",padding:"1rem 0",border:0},showLineNumbers:!0,wrapLines:!0,lineProps:function(e){var n,t="",o=vt(p);try{for(o.s();!(n=o.n()).done;){var s=n.value;e>=s[0]&&e<=s[1]&&(t="color-bg-accent")}}catch(a){o.e(a)}finally{o.f()}return{style:{display:"block"},class:t}},lineNumberStyle:{minWidth:"3.25em"},children:y.code}):(0,Bn.jsx)(mt,{})})]})})},jt=t(27967),xt=t(12574),Ct=t(23459),Nt=t(16241),Pt=t(46359),Tt=function(e){var n=e.variant,t=(0,Sn.useRouter)(),o=Vn(),s=o.codeLanguages,a=o.currentLanguage,i=t.asPath.split("?")[0];return"tabs"===n?(0,Bn.jsx)("nav",{"aria-label":"Programming Language",children:s.map((function(e){return(0,Bn.jsx)(Pt.r,{className:"subnav-item",href:"".concat(i,"?langId=").concat(e.id),"aria-current":e.id===a.id?"page":void 0,children:e.label},e.id)}))}):(0,Bn.jsxs)(xt.Z,{className:"position-relative",children:[(0,Bn.jsxs)(Ct.Z,{as:"summary",children:[a.label," ",(0,Bn.jsx)(Nt.Z.Caret,{})]}),(0,Bn.jsxs)(xt.Z.Modal,{style:{minWidth:300},align:"right",children:[(0,Bn.jsx)(xt.Z.Header,{children:"Programming Language"}),(0,Bn.jsx)(xt.Z.List,{children:s.map((function(e){return(0,Bn.jsx)(xt.Z.Item,{as:"a",href:"".concat(i,"?langId=").concat(e.id),selected:e.id===a.id,children:e.label},e.id)}))})]})]})},It=t(4932),At=t(25687);function St(e){var n=e.mainContext;return(0,Bn.jsx)(In.Tr.Provider,{value:n,children:(0,Bn.jsx)(jt.H,{children:(0,Bn.jsx)(Mn,{children:(0,Bn.jsx)(Ot,{})})})})}function Ot(){var e=(0,Sn.useRouter)(),n=Vn().article;return n?(0,Bn.jsx)("div",{className:"p-responsive my-5 mx-auto",style:{maxWidth:1600,minWidth:768},children:(0,Bn.jsxs)("div",{className:"d-flex",children:[(0,Bn.jsxs)("article",{className:"col-6 ml-lg-3 mr-3",children:[(0,Bn.jsx)(It.U,{variant:"info",children:(0,Bn.jsxs)("p",{className:"d-flex",children:[(0,Bn.jsx)("span",{className:"mr-3 mt-1",children:(0,Bn.jsx)(Tn.BeakerIcon,{size:18})}),(0,Bn.jsxs)("span",{children:["You've found one of our experimental articles! Have ideas or feedback for how we can further improve this article? Let us know"," ",(0,Bn.jsx)(Pt.r,{href:"https://github.com/github/docs/discussions/9369",target:"_blank",children:"in the discussion"}),"."]})]})}),(0,Bn.jsx)(lt,{})]}),(0,Bn.jsx)("div",{className:"col-6",children:(0,Bn.jsxs)("div",{className:"fix position-sticky mt-3",style:{top:"6.5em"},children:[(0,Bn.jsxs)("div",{className:"d-flex flex-justify-between flex-items-center mb-3",children:[(0,Bn.jsx)(Tt,{variant:"tabs"}),(0,Bn.jsxs)("div",{className:"flash",children:[(0,Bn.jsx)(Tn.ZapIcon,{className:"mr-2"}),(0,Bn.jsx)(Pt.r,{href:"/".concat(e.locale).concat(n.originalArticle),children:"Switch to non-interactive article"})]})]}),(0,Bn.jsx)(kt,{article:n})]})})]})}):(0,Bn.jsx)(At.pY,{})}},4932:function(e,n,t){"use strict";t.d(n,{U:function(){return c}});var o=t(94184),s=t.n(o),a=t(55784),i=t.n(a),r=t(85893),c=function(e){var n=e.variant,t=e.className,o=e.dangerouslySetInnerHTML,a=e.children;return(0,r.jsx)("div",{"data-testid":"callout",className:s()(t,i().container,"border rounded-1 p-3 f5","success"===n&&"color-border-success color-bg-success","info"===n&&"color-border-accent-emphasis color-bg-accent","warning"===n&&"color-bg-attention color-border-attention-emphasis"),dangerouslySetInnerHTML:o,children:a})}},97527:function(e,n,t){"use strict";t.d(n,{r:function(){return h}});var o=t(92809),s=t(10219),a=t(94184),i=t.n(a),r=t(48072),c=t.n(r),d=t(85893),l=["children","className","as"];function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){(0,o.Z)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function h(e){var n=e.children,t=e.className,o=e.as,a=void 0===o?"div":o,r=(0,s.Z)(e,l);return(0,d.jsx)(a,p(p({className:i()("f2 color-fg-muted mb-3",c().container,t)},r),"string"===typeof n?{dangerouslySetInnerHTML:{__html:n}}:{children:n}))}},775:function(e,n,t){"use strict";t.d(n,{S:function(){return h}});var o=t(92809),s=t(10219),a=t(94184),i=t.n(a),r=t(59267),c=t.n(r),d=t(85893),l=["children","as","className"];function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){(0,o.Z)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var h=function(e){var n=e.children,t=e.as,o=void 0===t?"div":t,a=e.className,r=(0,s.Z)(e,l);return(0,d.jsx)(o,p(p({},r),{},{className:i()(c().markdownBody,"markdown-body",a)},"string"===typeof n?{dangerouslySetInnerHTML:{__html:n}}:{children:n}))}},73980:function(e){e.exports={articleMarkdown:"ArticleMarkdown_articleMarkdown__1dX3y"}},55784:function(e){e.exports={container:"Callout_container__ppasH"}},48072:function(e){e.exports={container:"Lead_container__7YW6Y"}},59267:function(e){e.exports={markdownBody:"MarkdownContent_markdownBody__2Fa4B","has-nested-table":"MarkdownContent_has-nested-table__LPfu3"}}}]);